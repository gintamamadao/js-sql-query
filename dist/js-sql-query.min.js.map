{"version":3,"file":"js-sql-query.min.js","sources":["../src/util/util.ts","../src/error/builder/combine.error.ts","../src/error/builder/insert.error.ts","../src/error/builder/base.error.ts","../src/error/builder/limit.error.ts","../src/error/builder/order.error.ts","../src/error/builder/select.error.ts","../src/error/builder/term.error.ts","../src/error/builder/update.error.ts","../src/error/builder/builder.error.ts","../src/error/builder/create.error.ts","../src/error/builder/alter.error.ts","../src/error/builder/join.error.ts","../src/error/builder/index.ts","../src/util/dialects.ts","../src/constant/enum.ts","../src/verify/builder/insert.verify.ts","../src/verify/builder/combine.verify.ts","../src/verify/builder/safe.verify.ts","../src/verify/builder/limit.verify.ts","../src/verify/builder/order.verify.ts","../src/verify/builder/term.verify.ts","../src/verify/builder/update.verify.ts","../src/verify/builder/create.verify.ts","../src/verify/builder/alter.verify.ts","../src/verify/builder/join.verify.ts","../src/verify/builder/builder.verify.ts","../src/builder/store.ts","../src/builder/base.ts","../src/builder/limit.ts","../src/builder/order.ts","../src/builder/query.ts","../src/builder/insert.ts","../src/builder/term.ts","../src/constant/constant.ts","../src/builder/term_api.ts","../src/builder/where.ts","../src/builder/having.ts","../src/builder/func.ts","../src/builder/combine.ts","../src/builder/join.ts","../src/builder/select.ts","../src/builder/update.ts","../src/builder/delete.ts","../src/builder/replace.ts","../src/builder/create.ts","../src/builder/alter.ts","../src/error/execute/connect.error.ts","../src/error/execute/index.ts","../src/verify/execute/connect.verify.ts","../src/execute/connect/base_connect.ts","../src/execute/connect/mysql_connect.ts","../src/execute/connect/mssql_connect.ts","../src/execute/execute.ts","../src/builder/builder.ts","../src/index.ts"],"sourcesContent":["import { Type } from \"schema-verify\";\n\nexport function analyTmpl(tmpl: string, opts: any): string {\n    return tmpl\n        .replace(/\\{\\{([a-zA-Z_0-9]+)\\}\\}/g, function (match, key) {\n            if (opts.hasOwnProperty(key) && Type.string.isNotEmpty(opts[key])) {\n                return opts[key] + \" \";\n            } else {\n                return \"\";\n            }\n        })\n        .trim();\n}\n\nexport function argStrArrTrans<T>(arg: T | T[], otherArgs: T[]): T[] {\n    let args: T[] = [];\n    if (Type.array.is(arg)) {\n        args = <T[]>arg;\n    } else {\n        otherArgs = Type.array.safe(otherArgs);\n        otherArgs.unshift(<T>arg);\n        args = otherArgs;\n    }\n    return args;\n}\n","const ErrMsg = {\n    errorFuncInfo: \"错误的组合函数信息\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorFieldDataArr: \"错误的字段数据组\",\n    errorInsertValues: \"错误的插入值\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorDialect: \"错误的数据库类型\",\n    errorManualSql: \"错误的自定义sql\",\n    errorExecute: \"缺少或错误的数据库连接\",\n    emptySqlQuery: \"缺少sql语句\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorPage: \"错误的页码\",\n    errorSize: \"错误的页码\",\n    errorStep: \"错误的步长\",\n    errorOffset: \"错误的偏移\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorOrderInfo: \"错误的排序信息\",\n    errorValueList: \"需要非空数组\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorFieldMap: \"错误的字段映射\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorTermdata: \"错误的条件数据\",\n    errorTermSign: \"错误的条件类型\",\n    errorTermValue: \"错误的条件值\",\n    errorTermInfo: \"错误的条件信息\",\n    errorTermBracket: \"错误的条件括号信息\",\n    errorTermLogic: \"错误的条件逻辑\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    emptyUpdateInfo: \"缺少更新信息\",\n    errorUpdateInfo: \"错误的更新信息\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    emptyQueryType: \"未选择sql类型\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorCreateDbName: \"错误的数据库名\"\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    errorAlterField: \"错误的修改配置\",\n    emptyAlterInfos: \"空的修改配置\",\n};\n\nexport default ErrMsg;\n","const ErrMsg = {\n    tableFieldsError: \"错误的表字段名\",\n    tableFieldsAsMapError: \"错误的表字段映射名\",\n    joinTableInfoError: \"错误的联查信息\"\n};\n\nexport default ErrMsg;\n","import CombineError from \"./combine.error\";\nimport InsertError from \"./insert.error\";\nimport BaseError from \"./base.error\";\nimport LimitError from \"./limit.error\";\nimport OrderError from \"./order.error\";\nimport SelectError from \"./select.error\";\nimport TermError from \"./term.error\";\nimport UpdateError from \"./update.error\";\nimport BuilderError from \"./builder.error\";\nimport CreateError from \"./create.error\";\nimport AlterError from \"./alter.error\";\nimport JoinError from \"./join.error\";\n\nconst ErrMsg = {\n    ...CombineError,\n    ...InsertError,\n    ...BaseError,\n    ...LimitError,\n    ...OrderError,\n    ...SelectError,\n    ...TermError,\n    ...UpdateError,\n    ...BuilderError,\n    ...CreateError,\n    ...AlterError,\n    ...JoinError,\n    errorTableName: \"错误的表名，需要非空字符串\",\n    errorField: \"错误的表名，需要非空字符串\",\n    errorFields: \"错误的字段，需要非空字符串或非空字符串数组\",\n    errorFieldData: \"错误的字段数据\",\n    needStr: \"需要字符串\",\n    needNumStr: \"需要数字或者字符串\",\n    notSupportDialect: \"无法支持当前类型数据库\",\n    errorTermStatus: \"未设置条件类型\"\n};\n\nexport default ErrMsg;\n","import { Dialects } from \"../constant/interface\";\nimport { Type } from \"schema-verify\";\nimport ErrMsg from \"../error/builder/index\";\n\nconst DialectsObj: Dialects = {\n    mysql: {\n        safeValue(value: number | string): string {\n            let result: string = \"\";\n            if (typeof value === \"string\") {\n                value = value\n                    .replace(/\\'/g, () => \"''\")\n                    .replace(/\\\\/g, () => \"\\\\\\\\\");\n                result = `'${value}'`;\n            }\n            if (Type.number.is(value)) {\n                result = `'${value}'`;\n            }\n            if (!result) {\n                throw new Error(ErrMsg.needNumStr);\n            }\n            return result;\n        },\n        safeKey(key: string): string {\n            let result: string;\n            if (!Type.string.isNotEmpty(key)) {\n                throw new Error(ErrMsg.needStr);\n            }\n            result = key.replace(/`/g, \"``\");\n            return \"`\" + result + \"`\";\n        },\n    },\n    mssql: {\n        safeValue(value: number | string): string {\n            let result: string = \"\";\n            if (typeof value === \"string\") {\n                value = value.replace(/\\'/g, () => \"''\");\n                result = `'${value}'`;\n            }\n            if (Type.number.is(value)) {\n                result = `'${value}'`;\n            }\n            if (!result) {\n                throw new Error(ErrMsg.needNumStr);\n            }\n            return result;\n        },\n        safeKey(key: string): string {\n            if (!Type.string.isNotEmpty(key)) {\n                throw new Error(ErrMsg.needStr);\n            }\n            return `[${key}]`;\n        },\n    },\n    postgresql: {\n        safeValue(value: number | string): string {\n            let result: string = \"\";\n            if (typeof value === \"string\") {\n                value = value.replace(/\\'/g, () => \"''\");\n                result = `'${value}'`;\n            }\n            if (Type.number.is(value)) {\n                result = `'${value}'`;\n            }\n            if (!result) {\n                throw new Error(ErrMsg.needNumStr);\n            }\n            return result;\n        },\n        safeKey(key: string): string {\n            let result: string;\n            if (!Type.string.isNotEmpty(key)) {\n                throw new Error(ErrMsg.needStr);\n            }\n            result = key.replace(/\\\"/g, '\"\"');\n            return `\"${result}\"`;\n        },\n    },\n    sqlite: {\n        safeValue(value: number | string): string {\n            let result: string = \"\";\n            if (typeof value === \"string\") {\n                value = value.replace(/\\'/g, () => \"''\");\n                result = `'${value}'`;\n            }\n            if (Type.number.is(value)) {\n                result = `'${value}'`;\n            }\n            if (!result) {\n                throw new Error(ErrMsg.needNumStr);\n            }\n            return result;\n        },\n        safeKey(key: string): string {\n            let result: string;\n            if (!Type.string.isNotEmpty(key)) {\n                throw new Error(ErrMsg.needStr);\n            }\n            result = key.replace(/`/g, \"``\");\n            return \"`\" + result + \"`\";\n        },\n    },\n};\n\nexport default DialectsObj;\n","export enum DialectTypes {\n    mysql = \"mysql\",\n    mssql = \"mssql\",\n    postgresql = \"postgresql\",\n    sqlite = \"sqlite\"\n}\n\nexport enum QueryTypes {\n    insert = \"INSERT\",\n    replace = \"REPLACE\",\n    select = \"SELECT\",\n    update = \"UPDATE\",\n    delete = \"DELETE\",\n    create = \"CREATE\",\n    alter = \"ALTER\"\n}\n\nexport enum FuncTypes {\n    count = \"COUNT\",\n    sum = \"SUM\",\n    max = \"MAX\",\n    min = \"MIN\",\n    avg = \"AVG\",\n    abs = \"ABS\",\n    ceil = \"CEIL\",\n    floor = \"FLOOR\",\n    round = \"ROUND\",\n    log = \"LOG\",\n    log2 = \"LOG2\",\n    exp = \"EXP\",\n    power = \"POWER\",\n    acos = \"ACOS\",\n    asin = \"ASIN\",\n    atan = \"ATAN\",\n    cos = \"COS\",\n    sin = \"SIN\",\n    tan = \"TAN\",\n    conv = \"CONV\",\n    random = \"RANDOM\",\n    rand = \"RAND\",\n    radians = \"RADIANS\",\n    degrees = \"DEGREES\",\n    distinct = \"DISTINCT\"\n}\n\nexport enum TermLogic {\n    and = \"AND\",\n    or = \"OR\"\n}\n\nexport enum TermSign {\n    equal = \"=\",\n    notEqual = \"<>\",\n    more = \">\",\n    less = \"<\",\n    moreEqual = \">=\",\n    lessEqual = \"<=\",\n    like = \"LIKE\",\n    notlike = \"NOT LIKE\",\n    isNot = \"IS NOT\",\n    in = \"IN\",\n    notIn = \"NOT IN\",\n    between = \"BETWEEN\",\n    notBetween = \"NOT BETWEEN\"\n}\n\nexport enum OrderTypes {\n    desc = \"DESC\",\n    asc = \"ASC\",\n    field = \"FIELD\"\n}\n\nexport enum UpdateTypes {\n    set = \"SET\",\n    add = \"ADD\",\n    minus = \"MINUS\"\n}\n\nexport enum WidgetTypes {\n    func = \"FUNC\",\n    term = \"TERM\",\n    order = \"ORDER\"\n}\n\nexport enum SqlDataTypes {\n    tinyint = \"TINYINT\",\n    smallint = \"SMALLINT\",\n    mediumint = \"MEDIUMINT\",\n    int = \"INT\",\n    bigint = \"BIGINT\",\n    float = \"FLOAT\",\n    double = \"DOUBLE\",\n    decimal = \"DECIMAL\",\n    date = \"DATE\",\n    time = \"TIME\",\n    year = \"YEAR\",\n    datetime = \"DATETIME\",\n    timestamp = \"TIMESTAMP\",\n    char = \"CHAR\",\n    varchar = \"VARCHAR\",\n    tinyblob = \"TINYBLOB\",\n    tinytest = \"TINYTEXT\",\n    blob = \"BLOB\",\n    test = \"TEXT\",\n    mediumblob = \"MEDIUMBLOB\",\n    mediumtext = \"MEDIUMTEXT\",\n    longblob = \"LONGBLOB\",\n    longtext = \"LONGTEXT\"\n}\n\nexport enum TableOptions {\n    primaryKey = \"PRIMARY KEY\",\n    uniqueKey = \"UNIQUE KEY\",\n    engine = \"ENGINE\",\n    autoIncrement = \"AUTO_INCREMENT\",\n    defaultCharset = \"DEFAULT CHARSET\",\n    comment = \"COMMENT\",\n    unsigned = \"UNSIGNED\",\n    notNull = \"NOT NULL\",\n    default = \"DEFAULT\",\n    onUpdate = \"ON UPDATE\",\n    constraint = \"CONSTRAINT\"\n}\n\nexport enum AlterMethods {\n    add = \"ADD\",\n    drop = \"DROP\",\n    modify = \"MODIFY\",\n    change = \"CHANGE\"\n}\n\nexport enum JoinTypes {\n    inner = \"INNER\",\n    left = \"LEFT\",\n    right = \"RIGHT\"\n}\n\nexport enum TermTypes {\n    where = \"whereTerm\",\n    having = \"havingTerm\"\n}\n\nexport enum DialectModules {\n    mysql = \"mysql\",\n    mssql = \"mssql\"\n}\n","import Schema from \"schema-verify\";\n\nconst fieldDataArrSchema = new Schema({\n    type: Array,\n    elements: {\n        type: Object,\n        required: true,\n        props: [\n            [\n                {\n                    type: String\n                },\n                {\n                    type: Number\n                }\n            ]\n        ]\n    }\n});\n\nexport const fieldDataArrVerify = fieldDataArrSchema.verify;\n","import Schema from \"schema-verify\";\nimport { FuncTypes } from \"../../constant/enum\";\n\nconst funcInfoSchema = new Schema({\n    type: Object,\n    restrict: true,\n    props: [\n        {\n            index: \"funcFeild\",\n            required: true,\n            type: String,\n        },\n    ],\n});\n\nconst funcInputSchema = new Schema({\n    type: Object,\n    restrict: true,\n    props: [\n        {\n            type: String,\n            index: \"func\",\n            required: true,\n            custom: (value: keyof typeof FuncTypes) => {\n                return !!FuncTypes[value];\n            },\n        },\n        [\n            {\n                index: \"field\",\n                required: true,\n                type: String,\n            },\n            {\n                type: Number,\n            },\n        ],\n    ],\n});\n\nexport const funcInfoVerify = funcInfoSchema.verify;\nexport const funcInputVerify = funcInputSchema.verify;\n","import Schema from \"schema-verify\";\n\nexport const dialectSchema = new Schema({\n    type: Object,\n    restrict: true,\n    props: [\n        {\n            index: \"safeKey\",\n            required: true,\n            type: Function\n        },\n        {\n            index: \"safeValue\",\n            required: true,\n            type: Function\n        }\n    ]\n});\n\nexport const manualSqlSchema = new Schema([\n    {\n        type: String,\n        minLength: 1\n    },\n    {\n        type: Function\n    },\n    {\n        type: Object\n    }\n]);\n\nexport const dialectVerify = dialectSchema.verify;\nexport const manualSqlVerify = manualSqlSchema.verify;\n","import Schema from \"schema-verify\";\n\nexport const pageSchema = new Schema({\n    type: Number,\n    integer: true,\n    min: 1\n});\n\nexport const limitInfoSchema = new Schema({\n    type: Object,\n    restrict: true,\n    props: [\n        {\n            type: Number,\n            index: \"offset\",\n            integer: true,\n            required: true\n        },\n        {\n            type: Number,\n            index: \"step\",\n            integer: true,\n            required: true\n        }\n    ]\n});\n\nexport const pageVerify = pageSchema.verify;\nexport const limitInfoVerify = limitInfoSchema.verify;\n","import Schema from \"schema-verify\";\nimport { OrderTypes } from \"../../constant/enum\";\n\nexport const orderInfoSchema = new Schema({\n    type: Object,\n    restrict: true,\n    props: [\n        {\n            index: \"field\",\n            required: true,\n            type: String\n        },\n        {\n            index: \"type\",\n            required: true,\n            type: String,\n            enum: OrderTypes\n        },\n        {\n            index: \"list\",\n            type: Array,\n            elements: [\n                [\n                    {\n                        type: String,\n                        required: true,\n                        minLength: 1\n                    },\n                    {\n                        type: Number\n                    }\n                ]\n            ]\n        }\n    ]\n});\n\nexport const valueListSchema = new Schema({\n    type: Array,\n    elements: [\n        [\n            {\n                type: String,\n                required: true,\n                minLength: 1\n            },\n            {\n                type: Number\n            }\n        ]\n    ]\n});\n\nexport const orderInfoVerify = orderInfoSchema.verify;\nexport const valueListVerify = valueListSchema.verify;\n","import Schema from \"schema-verify\";\nimport { TermSign, TermLogic } from \"../../constant/enum\";\n\nconst termDataSchema = new Schema({\n    type: Object,\n    props: [\n        [\n            {\n                required: true,\n                type: String\n            },\n            {\n                type: Number\n            },\n            {\n                type: Array,\n                minLength: 1,\n                elements: [\n                    [\n                        {\n                            type: String,\n                            required: true\n                        },\n                        {\n                            type: Number\n                        }\n                    ]\n                ]\n            }\n        ]\n    ]\n});\n\nconst termSignSchema = new Schema({\n    type: String,\n    enum: TermSign\n});\n\nconst termLogicSchema = new Schema({\n    type: String,\n    enum: TermLogic\n});\n\nconst termValueSchema = new Schema([\n    {\n        required: true,\n        type: String\n    },\n    {\n        type: Number\n    }\n]);\n\nconst termInSchema = new Schema({\n    type: Array,\n    minLength: 1,\n    elements: [\n        [\n            {\n                type: String,\n                required: true\n            },\n            {\n                type: Number\n            }\n        ]\n    ]\n});\n\nconst termBetweenSchema = new Schema({\n    type: Array,\n    length: 2,\n    elements: [\n        [\n            {\n                type: String,\n                required: true\n            },\n            {\n                type: Number\n            }\n        ]\n    ]\n});\n\nconst termBracketSchema = new Schema({\n    type: Object,\n    restrict: true,\n    props: [\n        {\n            index: \"position\",\n            required: true,\n            type: Number,\n            min: 1\n        },\n        {\n            index: \"logic\",\n            required: true,\n            type: String,\n            enum: TermLogic\n        }\n    ]\n});\n\nconst termInfoSchema = new Schema({\n    type: Object,\n    restrict: true,\n    props: [\n        {\n            index: \"field\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        [\n            {\n                index: \"value\",\n                required: true,\n                type: String\n            },\n            {\n                type: Number\n            },\n            {\n                type: Array,\n                minLength: 1,\n                elements: [\n                    [\n                        {\n                            type: String,\n                            required: true\n                        },\n                        {\n                            type: Number\n                        }\n                    ]\n                ]\n            }\n        ],\n        {\n            index: \"sign\",\n            required: true,\n            type: String,\n            enum: TermSign\n        },\n        {\n            index: \"logic\",\n            required: true,\n            type: String,\n            enum: TermLogic\n        }\n    ]\n});\n\nexport const termDataVerify = termDataSchema.verify;\nexport const termSignVerify = termSignSchema.verify;\nexport const termLogicVerify = termLogicSchema.verify;\nexport const termValueVerify = termValueSchema.verify;\nexport const termInVerify = termInSchema.verify;\nexport const termBetweenVerify = termBetweenSchema.verify;\nexport const termBracketVerify = termBracketSchema.verify;\nexport const termInfoVerify = termInfoSchema.verify;\n","import Schema from \"schema-verify\";\nimport { UpdateTypes } from \"../../constant/enum\";\n\nconst updateInfoSchema = new Schema({\n    type: Object,\n    props: [\n        [\n            {\n                index: \"value\",\n                required: true,\n                type: String\n            },\n            {\n                type: Number\n            }\n        ],\n        {\n            index: \"type\",\n            required: true,\n            type: String,\n            enum: UpdateTypes\n        }\n    ]\n});\n\nexport const updateInfoVerify = updateInfoSchema.verify;\n","import Schema from \"schema-verify\";\n\nconst tableFieldSchema = new Schema({\n    type: Object,\n    props: [\n        {\n            index: \"field\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"type\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"unsigned\",\n            type: Boolean\n        },\n        {\n            index: \"autoIncrement\",\n            type: Boolean\n        },\n        {\n            index: \"notNull\",\n            type: Boolean\n        },\n        [\n            {\n                index: \"default\",\n                type: String\n            },\n            {\n                type: Number\n            }\n        ],\n        {\n            index: \"onUpdate\",\n            type: String\n        },\n        {\n            index: \"comment\",\n            type: String\n        }\n    ]\n});\n\nconst combineKeySchema = new Schema({\n    type: Object,\n    props: [\n        {\n            index: \"keyName\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"combineFields\",\n            required: true,\n            type: Array,\n            minLength: 1,\n            elements: {\n                type: String,\n                minLength: 1\n            }\n        }\n    ]\n});\n\nconst tableInfoSchema = new Schema({\n    type: Object,\n    props: [\n        {\n            index: \"tableName\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        [\n            {\n                index: \"primaryKey\",\n                required: true,\n                type: String,\n                minLength: 1\n            },\n            combineKeySchema\n        ],\n        [\n            {\n                index: \"uniqueKey\",\n                type: String,\n                minLength: 1\n            },\n            combineKeySchema\n        ],\n        {\n            index: \"engine\",\n            type: String\n        },\n        {\n            index: \"defaultCharset\",\n            type: String\n        },\n        {\n            index: \"comment\",\n            type: String\n        },\n        {\n            index: \"autoIncrement\",\n            type: Number\n        },\n        {\n            index: \"fields\",\n            type: Array,\n            minLength: 1,\n            elements: tableFieldSchema\n        }\n    ]\n});\nexport const tableFieldVerify = tableFieldSchema.verify;\nexport const uniqueKeyVerify = combineKeySchema.verify;\nexport const tableInfoVerify = tableInfoSchema.verify;\n","import Schema from \"schema-verify\";\nimport { AlterMethods } from \"../../constant/enum\";\n\nconst alterFieldSchema = new Schema({\n    type: Object,\n    props: [\n        {\n            index: \"field\",\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"type\",\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"unsigned\",\n            type: Boolean\n        },\n        {\n            index: \"autoIncrement\",\n            type: Boolean\n        },\n        {\n            index: \"notNull\",\n            type: Boolean\n        },\n        [\n            {\n                index: \"default\",\n                type: String\n            },\n            {\n                type: Number\n            }\n        ],\n        {\n            index: \"onUpdate\",\n            type: String\n        },\n        {\n            index: \"comment\",\n            type: String\n        }\n    ]\n});\n\nconst alterInfosSchema = new Schema({\n    type: Object,\n    props: [\n        {\n            index: \"method\",\n            required: true,\n            type: String,\n            enum: AlterMethods\n        },\n        {\n            index: \"field\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"alterField\",\n            required: true,\n            schema: alterFieldSchema\n        }\n    ]\n});\n\nexport const alterFieldVerify = alterFieldSchema.verify;\nexport const alterInfosVerify = alterInfosSchema.verify;\n","import Schema from \"schema-verify\";\nimport { TermSign } from \"../../constant/enum\";\n\nconst fieldsMapSchema = new Schema({\n    type: Object,\n    props: {\n        type: Array,\n        elements: {\n            type: String,\n            required: true,\n            minLength: 1\n        }\n    }\n});\n\nconst fieldsAsMapSchema = new Schema({\n    type: Object,\n    props: {\n        type: Object,\n        props: {\n            type: String,\n            required: true,\n            minLength: 1\n        }\n    }\n});\n\nconst joinInfoSchema = new Schema({\n    type: Object,\n    props: {\n        tableName: {\n            type: String,\n            required: true,\n            minLength: 1\n        },\n        termInfos: {\n            type: Array,\n            required: true,\n            elements: {\n                type: Object,\n                props: {\n                    symbol: {\n                        type: String,\n                        required: true,\n                        minLength: 1,\n                        enum: TermSign\n                    },\n                    tableFields: {\n                        type: Object,\n                        props: {\n                            type: String,\n                            required: true,\n                            minLength: 1\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n\nexport const fieldsMapVerify = fieldsMapSchema.verify;\nexport const fieldsAsMapVerify = fieldsAsMapSchema.verify;\nexport const joinInfoVerify = joinInfoSchema.verify;\n","import Schema from \"schema-verify\";\n\nexport const strArrVerify = new Schema({\n    type: Array,\n    elements: {\n        type: String,\n        required: true,\n        minLength: 1\n    }\n}).verify;\n\nexport const strObjVerify = new Schema({\n    type: Object,\n    props: {\n        type: String,\n        required: true,\n        minLength: 1\n    }\n}).verify;\n\nexport const naturalVerify = new Schema({\n    type: Number,\n    natural: true\n}).verify;\n\nexport const integerVerify = new Schema({\n    type: Number,\n    integer: true\n}).verify;\n\nexport const fieldDataVerify = new Schema({\n    type: Object,\n    props: [\n        [\n            {\n                required: true,\n                type: String\n            },\n            {\n                type: Number\n            }\n        ]\n    ]\n}).verify;\n","import { Type } from \"schema-verify\";\nlet QUERY_LIST: string[] = [];\n\nclass Store {\n    getStore(): string[] {\n        return QUERY_LIST.slice();\n    }\n\n    storeSql(query: string) {\n        if (Type.string.isNotEmpty(query)) {\n            QUERY_LIST.push(query);\n        }\n    }\n\n    isStoreEmpty(): boolean {\n        return !(QUERY_LIST.length > 0);\n    }\n\n    cleanStoreSql(): void {\n        QUERY_LIST = [];\n    }\n}\n\nexport default new Store();\n","import Dialects from \"../util/dialects\";\nimport { DialectTypes, DialectModules } from \"../constant/enum\";\nimport { SafeValue, SafeKey, Dialect, SqlParam } from \"../constant/interface\";\nimport { Type } from \"schema-verify\";\nimport { dialectVerify, manualSqlVerify } from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\nimport Execute from \"../execute/execute\";\nimport Store from \"./store\";\n\nclass Base {\n    protected _queryTable: string = \"\";\n    protected _dialect: Dialect = {} as Dialect;\n    protected _dialectType: DialectTypes = \"\" as DialectTypes;\n    protected _execute: Execute = {} as Execute;\n\n    get dialectType(): DialectTypes {\n        const dialectType: DialectTypes = this._dialectType;\n        if (!dialectVerify(Dialects[dialectType])) {\n            throw new Error(ErrMsg.errorDialect);\n        }\n        return dialectType;\n    }\n\n    set dialectType(dialectType: DialectTypes) {\n        this.setDialect(dialectType);\n    }\n\n    setDialect(dialectType: DialectTypes): void {\n        if (!dialectVerify(Dialects[dialectType])) {\n            throw new Error(ErrMsg.errorDialect);\n        }\n        const dialect = Dialects[dialectType];\n        this._dialect = dialect;\n        this._dialectType = dialectType;\n        this._safeValue = dialect.safeValue;\n        this._safeKey = dialect.safeKey;\n    }\n\n    protected _safeValue: SafeValue = function (): string {\n        return \"\";\n    };\n\n    protected _safeKey: SafeKey = function (): string {\n        return \"\";\n    };\n\n    protected loadModule(moduleName: string): void {\n        try {\n            return require(moduleName);\n        } catch (err) {\n            if (err && err.code === \"MODULE_NOT_FOUND\") {\n                throw new Error(`请先安装模块 ${moduleName}`);\n            }\n            throw err;\n        }\n    }\n\n    protected safeValue: SafeValue = function (value) {\n        const _dialectType = this._dialectType;\n        let dbModule;\n        switch (_dialectType) {\n            case DialectTypes.mysql:\n                dbModule = this.loadModule(DialectModules.mysql);\n                value = dbModule.escape(value);\n                break;\n            default:\n                value = this._safeValue(value);\n                break;\n        }\n        return value + \"\";\n    };\n\n    protected safeKey: SafeKey = function (key: string): string {\n        return this._safeKey(key);\n    };\n\n    protected manualSql(sql: SqlParam, key: string): void {\n        if (!manualSqlVerify(sql) && !(sql instanceof Base)) {\n            throw new Error(ErrMsg.errorManualSql);\n        }\n        (<any>this)[key] = sql;\n    }\n\n    protected formatManualSql(key: string): string {\n        let sql: any = (<any>this)[key];\n        if (Type.string.is(sql)) {\n            return sql;\n        }\n        if (Type.func.is(sql)) {\n            sql = sql();\n            if (Type.string.is(sql)) {\n                return sql;\n            }\n        }\n        if (Type.object.isNotEmpty(sql) && sql instanceof Base) {\n            sql = sql.query;\n            if (Type.string.is(sql)) {\n                return sql;\n            }\n        }\n        return \"\";\n    }\n\n    protected build(): string {\n        return \"\";\n    }\n\n    get query(): string {\n        return this.build();\n    }\n\n    table(queryTable: string): this {\n        if (!Type.string.isNotEmpty(queryTable)) {\n            throw new Error(ErrMsg.errorTableName);\n        }\n        this._queryTable = queryTable;\n        return this;\n    }\n\n    protected getQueryTable(): string {\n        const queryTable = this._queryTable;\n        if (!Type.string.isNotEmpty(queryTable)) {\n            throw new Error(ErrMsg.errorTableName);\n        }\n        return this.safeKey(queryTable);\n    }\n\n    storeSql(): this {\n        let sqlStr;\n        try {\n            sqlStr = this.build();\n        } catch (e) {}\n        if (Type.string.isNotEmpty(sqlStr)) {\n            Store.storeSql(sqlStr);\n        }\n        return this;\n    }\n\n    setExecute(execute: Execute): void {\n        this._execute = execute;\n    }\n\n    exec<T = any>(sqlStr?: string): Promise<T> {\n        const execute: Execute = this._execute;\n        const query = Type.string.isNotEmpty(sqlStr) ? sqlStr : this.build();\n        if (!Type.string.isNotEmpty(query)) {\n            throw new Error(ErrMsg.emptySqlQuery);\n        }\n        if (Type.object.isNot(execute) || Type.func.isNot(execute.exec)) {\n            throw new Error(ErrMsg.errorExecute);\n        }\n        return execute.exec(query || \"\");\n    }\n\n    execAll<T = any>(queryList?: string[]): Promise<T[][]> {\n        queryList = queryList || [];\n        const execute: Execute = this._execute;\n        queryList = Type.array.isNotEmpty(queryList)\n            ? queryList\n            : Store.getStore();\n        if (Type.object.isNot(execute) || Type.func.isNot(execute.exec)) {\n            throw new Error(ErrMsg.errorExecute);\n        }\n        const promiseArr: Promise<T[]>[] = [];\n        for (let query of queryList) {\n            if (!Type.string.isNotEmpty(query)) {\n                continue;\n            }\n            promiseArr.push(execute.exec(query));\n        }\n        return Promise.all(promiseArr);\n    }\n}\n\nexport default Base;\n","import { Type } from \"schema-verify\";\nimport {\n    integerVerify,\n    pageVerify,\n    naturalVerify,\n    limitInfoVerify,\n} from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\ninterface LimitInfo {\n    offset: number;\n    step: number;\n}\n\nclass Limit {\n    protected limitInfo: LimitInfo = {} as LimitInfo;\n\n    limitBuild(query: string): string {\n        const limitInfo: LimitInfo = this.limitInfo;\n        if (!limitInfoVerify(limitInfo)) {\n            return query;\n        }\n        const offset: number = limitInfo.offset;\n        const step: number = limitInfo.step;\n        if (offset === 0) {\n            return `${query} LIMIT ${step}`;\n        }\n        if (step === -1) {\n            return `${query} OFFSET ${offset}`;\n        }\n        return `${query} LIMIT ${step} OFFSET ${offset}`;\n    }\n\n    limit(offset: number, step?: number): void {\n        if (!integerVerify(offset)) {\n            throw new Error(ErrMsg.errorOffset);\n        }\n        if (Type.undefined.isNot(step) && !integerVerify(step)) {\n            throw new Error(ErrMsg.errorStep);\n        }\n        let limitInfo: LimitInfo = {} as LimitInfo;\n        if (Type.number.is(offset) && Type.number.is(step)) {\n            step = step || 0;\n            limitInfo = {\n                offset,\n                step,\n            };\n        }\n        if (Type.number.is(offset) && !Type.number.is(step)) {\n            limitInfo = {\n                offset: 0,\n                step: offset,\n            };\n        }\n        this.limitInfo = limitInfo;\n    }\n\n    offset(offset: number): void {\n        if (!integerVerify(offset)) {\n            throw new Error(ErrMsg.errorOffset);\n        }\n        this.limitInfo = {\n            offset: offset,\n            step: -1,\n        };\n    }\n\n    step(step: number): void {\n        if (!integerVerify(step)) {\n            throw new Error(ErrMsg.errorStep);\n        }\n        this.limitInfo = {\n            offset: 0,\n            step,\n        };\n    }\n\n    paging(page: number, size: number): void {\n        if (!pageVerify(page)) {\n            throw new Error(ErrMsg.errorPage);\n        }\n        if (!naturalVerify(size)) {\n            throw new Error(ErrMsg.errorSize);\n        }\n        const offset = (page - 1) * size;\n        this.limitInfo = {\n            offset,\n            step: size,\n        };\n    }\n}\n\nexport default Limit;\n","import { argStrArrTrans } from \"../util/util\";\nimport { OrderTypes } from \"../constant/enum\";\nimport { OrderInfo, FieldOrder } from \"../constant/interface\";\nimport { Type } from \"schema-verify\";\nimport Base from \"./base\";\nimport {\n    orderInfoVerify,\n    valueListVerify,\n    strArrVerify,\n} from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\nconst SQL_NAME = \"orderSql\";\n\nclass Order extends Base {\n    protected orderInfos: OrderInfo[];\n    protected orderSql: string | Function = \"\";\n    constructor() {\n        super();\n        this.orderInfos = [];\n    }\n\n    build(): string {\n        const orderSql: string = this.formatOrderSql();\n        if (Type.string.isNotEmpty(orderSql)) {\n            return orderSql;\n        }\n        const orderInfos: OrderInfo[] = Type.array.safe(this.orderInfos);\n        if (!Type.array.isNotEmpty(orderInfos)) {\n            return \"\";\n        }\n        let ordersArr: string[] = [];\n        for (const info of orderInfos) {\n            if (!orderInfoVerify(info)) {\n                continue;\n            }\n            const field: string = info.field;\n            const type: OrderTypes = info.type;\n            const list = info.list;\n            const safeField = this.safeKey(field);\n            if (type === OrderTypes.field) {\n                const listStr: string = (list || [])\n                    .map((value) => this.safeValue(value))\n                    .join(\", \");\n                ordersArr.push(`${type}(${safeField}, ${listStr})`);\n                continue;\n            }\n            ordersArr.push(`${safeField} ${type}`);\n        }\n        if (!Type.array.isNotEmpty(ordersArr)) {\n            return \"\";\n        }\n        ordersArr = Array.from(new Set(ordersArr));\n        const ordersStr = ordersArr.join(\", \");\n        return ordersStr;\n    }\n\n    orderBuild(query: string): string {\n        const ordersStr: string = this.build();\n        if (Type.string.isNotEmpty(ordersStr)) {\n            query = `${query} ORDER BY ${ordersStr}`;\n        }\n        return query;\n    }\n\n    descBy(firstField: string[] | string, otherFields: string[]): this {\n        const argFields: string[] = argStrArrTrans(firstField, otherFields);\n        return this.orderCache(argFields, OrderTypes.desc);\n    }\n\n    ascBy(firstField: string[] | string, otherFields: string[]): this {\n        const argFields: string[] = argStrArrTrans(firstField, otherFields);\n        return this.orderCache(argFields, OrderTypes.asc);\n    }\n\n    orderField(data: FieldOrder): this {\n        data = Type.object.safe(data);\n        const fields: string[] = Object.keys(data);\n        return this.orderCache(fields, OrderTypes.field, data);\n    }\n\n    order(sql: string | Function) {\n        this.manualSql(sql, SQL_NAME);\n    }\n\n    protected formatOrderSql(): string {\n        return this.formatManualSql(SQL_NAME);\n    }\n\n    protected orderCache(\n        fields: string[],\n        type: OrderTypes,\n        fieldOrder?: FieldOrder\n    ): this {\n        if (!strArrVerify(fields)) {\n            throw new Error(ErrMsg.errorFields);\n        }\n        fieldOrder = Type.object.safe(fieldOrder);\n        const orderInfos: OrderInfo[] = Type.array.safe(this.orderInfos);\n        for (const field of fields) {\n            const info: OrderInfo = {\n                field,\n                type,\n            };\n            if (type === OrderTypes.field) {\n                const list: string[] = (<FieldOrder>fieldOrder)[field];\n                if (!valueListVerify(list)) {\n                    throw new Error(ErrMsg.errorValueList);\n                }\n                info[\"list\"] = list;\n            }\n            if (!orderInfoVerify(info)) {\n                throw new Error(ErrMsg.errorOrderInfo);\n            }\n            orderInfos.push(info);\n        }\n        this.orderInfos = orderInfos;\n        return this;\n    }\n}\n\nexport default Order;\n","import { FieldOrder } from \"../constant/interface\";\nimport Base from \"./base\";\nimport Limit from \"./limit\";\nimport Order from \"./order\";\n\nclass Query extends Base {\n    protected queryLimit: Limit = {} as Limit;\n    protected queryOrder: Order = {} as Order;\n\n    protected getLimitCase(): Limit {\n        let queryLimit: Limit = this.queryLimit;\n        if (!queryLimit || !(queryLimit instanceof Limit)) {\n            queryLimit = new Limit();\n            this.queryLimit = queryLimit;\n        }\n        return queryLimit;\n    }\n\n    protected limitBuild(query: string): string {\n        return this.getLimitCase().limitBuild(query);\n    }\n\n    offset(offset: number): this {\n        this.getLimitCase().offset(offset);\n        return this;\n    }\n\n    step(step: number): this {\n        this.getLimitCase().step(step);\n        return this;\n    }\n\n    protected getOrderCase(): Order {\n        let queryOrder: Order = this.queryOrder;\n        if (!queryOrder || !(queryOrder instanceof Order)) {\n            queryOrder = new Order();\n            queryOrder.setDialect(this.dialectType);\n            this.queryOrder = queryOrder;\n        }\n        return queryOrder;\n    }\n\n    protected orderBuild(query: string): string {\n        return this.getOrderCase().orderBuild(query);\n    }\n\n    descBy(firstField: string[] | string, ...otherFields: string[]): this {\n        this.getOrderCase().descBy(firstField, otherFields);\n        return this;\n    }\n\n    ascBy(firstField: string[] | string, ...otherFields: string[]): this {\n        this.getOrderCase().ascBy(firstField, otherFields);\n        return this;\n    }\n\n    orderField(data: FieldOrder): this {\n        this.getOrderCase().orderField(data);\n        return this;\n    }\n\n    order(sql: string | Function): this {\n        this.getOrderCase().order(sql);\n        return this;\n    }\n}\n\nexport default Query;\n","import { argStrArrTrans } from \"../util/util\";\nimport Query from \"./query\";\nimport { QueryTypes } from \"../constant/enum\";\nimport { FieldData } from \"../constant/interface\";\nimport { Type } from \"schema-verify\";\nimport {\n    fieldDataVerify,\n    fieldDataArrVerify,\n    strArrVerify,\n} from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\nconst SQL_NAME = \"valuesSql\";\nclass Insert extends Query {\n    protected insertData: FieldData;\n    protected insertFields: string[];\n    protected insertDataArr: FieldData[];\n    protected queryType: QueryTypes;\n    protected valuesSql: string | Function = \"\";\n    constructor() {\n        super();\n        this.queryType = QueryTypes.insert;\n        this.insertData = {};\n        this.insertFields = [];\n        this.insertDataArr = [];\n    }\n\n    data(data: FieldData): this {\n        if (!fieldDataVerify(data)) {\n            throw new Error(ErrMsg.errorFieldData);\n        }\n        const insertData: FieldData = Type.object.safe(this.insertData);\n        this.insertData = Object.assign({}, insertData, data);\n        return this;\n    }\n\n    fields(arg: any, ...otherArgs: any[]): this {\n        const args: string[] = argStrArrTrans(arg, otherArgs);\n        const insertFields: string[] = Type.array.safe(this.insertFields);\n        const result: string[] = (<string[]>[]).concat(insertFields, args);\n        this.insertFields = Array.from(new Set(result));\n        return this;\n    }\n\n    multiData(dataArr: FieldData[]): this {\n        if (!fieldDataArrVerify(dataArr)) {\n            throw new Error(ErrMsg.errorFieldDataArr);\n        }\n        const insertDataArr: FieldData[] = Type.array.safe(this.insertDataArr);\n        this.insertDataArr =  (<FieldData[]>[]).concat(insertDataArr, dataArr);\n        return this;\n    }\n\n    values(sql: string | Function): this {\n        this.manualSql(sql, SQL_NAME);\n        return this;\n    }\n\n    protected formatValuesSql(): string {\n        return this.formatManualSql(SQL_NAME);\n    }\n\n    protected formatFields(): string[] {\n        const insertData: FieldData = this.insertData;\n        const insertFields: string[] = this.insertFields;\n        const insertDataArr: FieldData[] = this.insertDataArr;\n        let fields: string[] = [];\n\n        if (strArrVerify(insertFields)) {\n            fields = insertFields;\n        } else if (fieldDataVerify(insertData)) {\n            fields = Object.keys(insertData);\n        } else if (fieldDataArrVerify(insertDataArr)) {\n            fields = Object.keys(insertDataArr[0]);\n        }\n\n        if (!strArrVerify(fields)) {\n            throw new Error(ErrMsg.errorFields);\n        }\n\n        return fields;\n    }\n\n    protected formatValues(fields: string[]): string {\n        fields = Type.array.safe(fields);\n        let result = \"\";\n        const valuesSql: string = this.formatValuesSql();\n        const insertData: FieldData = this.insertData;\n        const insertDataArr: FieldData[] = this.insertDataArr;\n        const valuesArr: string[] = [];\n\n        const valuesStrFormat = (data: FieldData): string => {\n            const valuesStr: string = fields\n                .map((field) => this.safeValue(data[field]))\n                .join(\", \");\n            return `( ${valuesStr} )`;\n        };\n        const valuesArrStrFormat = (arr: FieldData[]): string => {\n            for (const data of arr) {\n                if (Type.object.isNotEmpty(data)) {\n                    valuesArr.push(valuesStrFormat(data));\n                }\n            }\n            return valuesArr.join(\", \");\n        };\n\n        if (Type.string.isNotEmpty(valuesSql)) {\n            result = valuesSql;\n        } else if (fieldDataVerify(insertData)) {\n            result = valuesStrFormat(insertData);\n        } else if (fieldDataArrVerify(insertDataArr)) {\n            result = valuesArrStrFormat(insertDataArr);\n        }\n\n        if (!Type.string.isNotEmpty(result)) {\n            throw new Error(ErrMsg.errorInsertValues);\n        }\n        return `VALUES ${result}`;\n    }\n\n    build(): string {\n        const type: QueryTypes = this.queryType;\n        const table: string = this.getQueryTable();\n\n        const fields: string[] = this.formatFields();\n        const valuesStr: string = this.formatValues(fields);\n        const fieldsStr = fields.map((field) => this.safeKey(field)).join(\", \");\n        let query: string = `${type} INTO ${table} ( ${fieldsStr} )  ${valuesStr}`;\n        return query;\n    }\n}\n\nexport default Insert;\n","import { TermSign, TermLogic } from \"../constant/enum\";\nimport {\n    TermData,\n    TermInfo,\n    TermBracket,\n    SqlParam,\n} from \"../constant/interface\";\nimport Base from \"./base\";\nimport { Type } from \"schema-verify\";\nimport {\n    termDataVerify,\n    termSignVerify,\n    termLogicVerify,\n    termBracketVerify,\n    termValueVerify,\n    termInVerify,\n    termBetweenVerify,\n    termInfoVerify,\n} from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\nconst SQL_NAME = \"termSql\";\nclass Term extends Base {\n    protected termInfos: TermInfo[];\n    protected termBrackets: TermBracket[];\n    protected termSql: string | Function = \"\";\n    constructor() {\n        super();\n        this.termInfos = [];\n        this.termBrackets = [];\n    }\n\n    build(): string {\n        return this.termsBuild();\n    }\n\n    termsBuild(): string {\n        const termSql: string = this.formatTermSql();\n        if (Type.string.isNotEmpty(termSql)) {\n            return termSql;\n        }\n        const termInfos: TermInfo[] = this.termInfos;\n        const termBrackets: TermBracket[] = this.termBrackets;\n        if (!Type.array.isNotEmpty(termInfos)) {\n            return \"\";\n        }\n        const allTermStr = !Type.array.isNotEmpty(termBrackets)\n            ? this.formatTerms(termInfos)\n            : this.formatTermBrackets(termBrackets, termInfos);\n        return allTermStr;\n    }\n\n    protected formatTermSql(): string {\n        return this.formatManualSql(SQL_NAME);\n    }\n\n    protected formatTermBrackets(\n        brackets: TermBracket[],\n        terms: TermInfo[]\n    ): string {\n        let allTermStr: string = \"\";\n        brackets = Type.array.safe(brackets);\n        terms = Type.array.safe(terms);\n        const bracketsLen = brackets.length;\n        const termsLen = terms.length;\n        for (let i = 0; i < bracketsLen; i++) {\n            const curBracket: TermBracket = brackets[i];\n            const perBracket: TermBracket = brackets[i - 1];\n            const nextBracket: TermBracket = brackets[i + 1];\n            if (!termBracketVerify(curBracket)) {\n                throw new Error(ErrMsg.errorTermBracket);\n            }\n            const curPos: number = curBracket.position;\n            const curLogic: TermLogic = curBracket.logic;\n            let prePos: number = 0;\n            let nextPos: number = termsLen;\n            if (termBracketVerify(perBracket)) {\n                prePos = perBracket.position;\n            }\n            if (termBracketVerify(nextBracket)) {\n                nextPos = nextBracket.position;\n            }\n            const preTerms: TermInfo[] = terms.slice(prePos, curPos);\n            const nextTerms: TermInfo[] = terms.slice(curPos, nextPos);\n\n            const needFullBracket =\n                bracketsLen === 1 ||\n                i + 1 === bracketsLen ||\n                nextPos === termsLen;\n\n            const termStr: string = this.formatBracketTerm(\n                needFullBracket,\n                curLogic,\n                preTerms,\n                nextTerms\n            );\n\n            if (!Type.string.isNotEmpty(termStr)) {\n                continue;\n            }\n\n            allTermStr = Type.string.isNotEmpty(allTermStr)\n                ? `${allTermStr} ${termStr}`\n                : termStr;\n        }\n\n        return allTermStr;\n    }\n\n    protected formatBracketTerm(\n        needFullBracket: boolean,\n        logic: TermLogic,\n        preTerms: TermInfo[],\n        nextTerms: TermInfo[]\n    ): string {\n        preTerms = Type.array.safe(preTerms);\n        nextTerms = Type.array.safe(nextTerms);\n        const preTermsStr: string = this.formatTerms(preTerms);\n\n        if (preTerms.length <= 0 || nextTerms.length <= 0) {\n            return \"\";\n        }\n\n        if (needFullBracket) {\n            const nextTermsStr: string = this.formatTerms(nextTerms);\n            return `( ${preTermsStr} ) ${logic} ( ${nextTermsStr} )`;\n        }\n\n        return `( ${preTermsStr} ) ${logic}`;\n    }\n\n    protected formatTerms(terms: TermInfo[]): string {\n        terms = Type.array.safe(terms);\n        let allTermStr: string = \"\";\n        for (const term of terms) {\n            if (!termInfoVerify(term)) {\n                throw new Error(ErrMsg.errorTermInfo);\n            }\n            const field: string = this.safeKey(term.field);\n            const value = term.value;\n            const sign: TermSign = term.sign;\n            const logic: TermLogic = term.logic;\n            const termValue: string = this.formatTermValue(value, sign);\n            const termStr: string = `${field} ${sign} ${termValue}`;\n\n            if (!Type.string.isNotEmpty(allTermStr)) {\n                allTermStr = termStr;\n                continue;\n            }\n\n            allTermStr = `${allTermStr} ${logic} ${termStr}`;\n        }\n\n        return allTermStr;\n    }\n\n    protected formatTermValue(value: any, sign: TermSign): string {\n        let termValue: string;\n        if (sign === TermSign.in || sign === TermSign.notIn) {\n            if (!termInVerify(value)) {\n                throw new Error(ErrMsg.errorTermValue);\n            }\n            termValue = value\n                .map((item: any) => this.safeValue(item))\n                .join(\", \");\n            return `( ${termValue} )`;\n        }\n\n        if (sign === TermSign.between || sign === TermSign.notBetween) {\n            if (!termBetweenVerify(value)) {\n                throw new Error(ErrMsg.errorTermValue);\n            }\n            const lower = this.safeValue(value[0]);\n            const upper = this.safeValue(value[1]);\n            return `${lower} AND ${upper}`;\n        }\n\n        if (!termValueVerify(value)) {\n            throw new Error(ErrMsg.errorTermValue);\n        }\n\n        if (sign === TermSign.like || sign === TermSign.notlike) {\n            value = `%${value}%`;\n        }\n\n        termValue = this.safeValue(value);\n\n        return termValue;\n    }\n\n    termCache(data: TermData, sign: TermSign, logic: TermLogic): this {\n        if (!termDataVerify(data)) {\n            throw new Error(ErrMsg.errorTermdata);\n        }\n        if (!termSignVerify(sign)) {\n            throw new Error(ErrMsg.errorTermSign);\n        }\n        if (!termLogicVerify(logic)) {\n            throw new Error(ErrMsg.errorTermLogic);\n        }\n        const termInfos: TermInfo[] = Type.array.safe(this.termInfos);\n        const termsArr: TermInfo[] = [];\n        for (const field in data) {\n            const value = data[field];\n            switch (sign) {\n                case TermSign.in:\n                case TermSign.notIn:\n                    if (!termInVerify(value)) {\n                        throw new Error(ErrMsg.errorTermValue);\n                    }\n                    break;\n                case TermSign.between:\n                case TermSign.notBetween:\n                    if (!termBetweenVerify(value)) {\n                        throw new Error(ErrMsg.errorTermValue);\n                    }\n                    break;\n                default:\n                    if (!termValueVerify(value)) {\n                        throw new Error(ErrMsg.errorTermValue);\n                    }\n                    break;\n            }\n\n            const term: TermInfo = {\n                field,\n                value,\n                sign,\n                logic,\n            };\n            termsArr.push(term);\n        }\n        this.termInfos = (<TermInfo[]>[]).concat(termInfos, termsArr);\n        return this;\n    }\n\n    bracketTerm(logic: TermLogic): this {\n        const termInfos: TermInfo[] = Type.array.safe(this.termInfos);\n        const termBrackets: TermBracket[] = Type.array.safe(this.termBrackets);\n        const termsLen: number = termInfos.length;\n        if (termsLen <= 0) {\n            return this;\n        }\n        for (const bracket of termBrackets) {\n            if (!termBracketVerify(bracket)) {\n                continue;\n            }\n            const position: number = bracket.position;\n            if (position === termsLen) {\n                return this;\n            }\n        }\n        const bracket: TermBracket = {\n            position: termsLen,\n            logic,\n        };\n        if (termBracketVerify(bracket)) {\n            termBrackets.push(bracket);\n        }\n        this.termBrackets = termBrackets;\n        return this;\n    }\n\n    sqlTerm(sql: SqlParam): void {\n        this.manualSql(sql, SQL_NAME);\n    }\n\n    equal(data: TermData): this {\n        return this.and(data, TermSign.equal);\n    }\n\n    notEqual(data: TermData): this {\n        return this.and(data, TermSign.notEqual);\n    }\n\n    in(data: TermData): this {\n        return this.and(data, TermSign.in);\n    }\n\n    notIn(data: TermData): this {\n        return this.and(data, TermSign.notIn);\n    }\n\n    more(data: TermData): this {\n        return this.and(data, TermSign.more);\n    }\n\n    less(data: TermData): this {\n        return this.and(data, TermSign.less);\n    }\n\n    moreEqual(data: TermData): this {\n        return this.and(data, TermSign.moreEqual);\n    }\n\n    lessEqual(data: TermData): this {\n        return this.and(data, TermSign.lessEqual);\n    }\n\n    like(data: TermData): this {\n        return this.and(data, TermSign.like);\n    }\n\n    notLike(data: TermData): this {\n        return this.and(data, TermSign.notlike);\n    }\n\n    between(data: TermData): this {\n        return this.and(data, TermSign.between);\n    }\n\n    notBetween(data: TermData): this {\n        return this.and(data, TermSign.notBetween);\n    }\n\n    orEqual(data: TermData): this {\n        return this.or(data, TermSign.equal);\n    }\n\n    orNotEqual(data: TermData): this {\n        return this.or(data, TermSign.notEqual);\n    }\n\n    orIn(data: TermData): this {\n        return this.or(data, TermSign.in);\n    }\n\n    orNotIn(data: TermData): this {\n        return this.or(data, TermSign.notIn);\n    }\n\n    orMore(data: TermData): this {\n        return this.or(data, TermSign.more);\n    }\n\n    orLess(data: TermData): this {\n        return this.or(data, TermSign.less);\n    }\n\n    orMoreEqual(data: TermData): this {\n        return this.or(data, TermSign.moreEqual);\n    }\n\n    orLessEqual(data: TermData): this {\n        return this.or(data, TermSign.lessEqual);\n    }\n\n    orLike(data: TermData): this {\n        return this.or(data, TermSign.like);\n    }\n\n    orBetween(data: TermData): this {\n        return this.or(data, TermSign.between);\n    }\n\n    orNotBetween(data: TermData): this {\n        return this.or(data, TermSign.notBetween);\n    }\n\n    orNotLike(data: TermData): this {\n        return this.or(data, TermSign.notlike);\n    }\n\n    bracket(): this {\n        return this.bracketTerm(TermLogic.and);\n    }\n\n    orBracket(): this {\n        return this.bracketTerm(TermLogic.or);\n    }\n\n    protected and(data: TermData, sign: TermSign): this {\n        return this.termCache(data, sign, TermLogic.and);\n    }\n\n    protected or(data: TermData, sign: TermSign): this {\n        return this.termCache(data, sign, TermLogic.or);\n    }\n}\n\nexport default Term;\n","export const TABLE_OPT_VALUES: string[] = [\"CURRENT_TIMESTAMP\"];\n\nexport const FEILD_TEMPLATE: string = `{{field}}{{type}}{{unsigned}}{{notNull}}{{default}}{{autoIncrement}}{{onUpdate}}{{comment}}`;\n\nexport const WHERE_TERM_API = {\n    equal: \"whereEqual\",\n    notEqual: \"whereNotEqual\",\n    in: \"whereIn\",\n    notIn: \"whereNotIn\",\n    more: \"whereMore\",\n    less: \"whereLess\",\n    moreEqual: \"whereMoreEqual\",\n    lessEqual: \"whereLessEqual\",\n    like: \"whereLike\",\n    notLike: \"whereNotLike\",\n    between: \"whereBetween\",\n    notBetween: \"whereNotBetween\",\n    orEqual: \"whereOrEqual\",\n    orNotEqual: \"whereOrNotEqual\",\n    orIn: \"whereOrIn\",\n    orNotIn: \"whereOrNotIn\",\n    orMore: \"whereOrMore\",\n    orLess: \"whereOrLess\",\n    orMoreEqual: \"whereOrMoreEqual\",\n    orLessEqual: \"whereOrLessEqual\",\n    orLike: \"whereOrLike\",\n    orNotLike: \"whereOrNotLike\",\n    orBetween: \"whereOrBetween\",\n    orNotBetween: \"whereOrNotBetween\"\n};\n\nexport const HAVING_TERM_API = {\n    equal: \"havingEqual\",\n    notEqual: \"havingNotEqual\",\n    in: \"havingIn\",\n    notIn: \"havingNotIn\",\n    more: \"havingMore\",\n    less: \"havingLess\",\n    moreEqual: \"havingMoreEqual\",\n    lessEqual: \"havingLessEqual\",\n    like: \"havingLike\",\n    notLike: \"havingNotLike\",\n    between: \"havingBetween\",\n    notBetween: \"havingNotBetween\",\n    orEqual: \"havingOrEqual\",\n    orNotEqual: \"havingOrNotEqual\",\n    orIn: \"havingOrIn\",\n    orNotIn: \"havingOrNotIn\",\n    orMore: \"havingOrMore\",\n    orLess: \"havingOrLess\",\n    orMoreEqual: \"havingOrMoreEqual\",\n    orLessEqual: \"havingOrLessEqual\",\n    orLike: \"havingOrLike\",\n    orNotLike: \"havingOrNotLike\",\n    orBetween: \"havingOrBetween\",\n    orNotBetween: \"havingOrNotBetween\"\n};\n","import { TermData } from \"../constant/interface\";\nimport Query from \"./query\";\nimport Term from \"./term\";\nimport { Type } from \"schema-verify\";\nimport { TermTypes } from \"../constant/enum\";\nimport { WHERE_TERM_API } from \"../constant/constant\";\nimport ErrMsg from \"../error/builder/index\";\n\nconst TERM_TYPES = Object.values(TermTypes);\n\nclass TermApi extends Query {\n    protected termStatus: TermTypes = \"\" as TermTypes;\n    constructor() {\n        super();\n        for (const termApi in WHERE_TERM_API) {\n            (<any>this)[termApi] = function (data: TermData) {\n                return this.termApiFn(termApi, data);\n            };\n        }\n    }\n\n    termApiFn(termApi: string, data: TermData): this {\n        const termStatus: TermTypes = this.termStatus;\n        if (!TERM_TYPES.includes(termStatus)) {\n            throw new Error(ErrMsg.errorTermStatus);\n        }\n        (<any>this).getTermCase(termStatus)[termApi](data);\n        return this;\n    }\n\n    bracket(): this {\n        const termStatus: TermTypes = this.termStatus;\n        if (!TERM_TYPES.includes(termStatus)) {\n            throw new Error(ErrMsg.errorTermStatus);\n        }\n        this.getTermCase(termStatus).bracket();\n        return this;\n    }\n\n    orBracket(): this {\n        const termStatus: TermTypes = this.termStatus;\n        if (!TERM_TYPES.includes(termStatus)) {\n            throw new Error(ErrMsg.errorTermStatus);\n        }\n        this.getTermCase(termStatus).orBracket();\n        return this;\n    }\n\n    protected getTermCase(type: TermTypes): Term {\n        let term: Term = (<any>this)[type];\n        if (!term || !(term instanceof Term)) {\n            term = new Term();\n            term.setDialect(this.dialectType);\n            (<any>this)[type] = term;\n        }\n        return term;\n    }\n\n    equal: (data: TermData) => this = (data) => this;\n    notEqual: (data: TermData) => this = (data) => this;\n    in: (data: TermData) => this = (data) => this;\n    notIn: (data: TermData) => this = (data) => this;\n    more: (data: TermData) => this = (data) => this;\n    less: (data: TermData) => this = (data) => this;\n    moreEqual: (data: TermData) => this = (data) => this;\n    lessEqual: (data: TermData) => this = (data) => this;\n    like: (data: TermData) => this = (data) => this;\n    notLike: (data: TermData) => this = (data) => this;\n    between: (data: TermData) => this = (data) => this;\n    notBetween: (data: TermData) => this = (data) => this;\n    orEqual: (data: TermData) => this = (data) => this;\n    orNotEqual: (data: TermData) => this = (data) => this;\n    orIn: (data: TermData) => this = (data) => this;\n    orNotIn: (data: TermData) => this = (data) => this;\n    orMore: (data: TermData) => this = (data) => this;\n    orLess: (data: TermData) => this = (data) => this;\n    orMoreEqual: (data: TermData) => this = (data) => this;\n    orLessEqual: (data: TermData) => this = (data) => this;\n    orLike: (data: TermData) => this = (data) => this;\n    orNotLike: (data: TermData) => this = (data) => this;\n    orBetween: (data: TermData) => this = (data) => this;\n    orNotBetween: (data: TermData) => this = (data) => this;\n}\n\nexport default TermApi;\n","import { TermData, SqlParam } from \"../constant/interface\";\nimport Term from \"./term\";\nimport TermApi from \"./term_api\";\nimport { Type } from \"schema-verify\";\nimport { TermTypes } from \"../constant/enum\";\nimport { WHERE_TERM_API } from \"../constant/constant\";\n\nclass Where extends TermApi {\n    protected whereTerm: Term = {} as Term;\n\n    constructor() {\n        super();\n        for (const termApi in WHERE_TERM_API) {\n            const whereTermApi =\n                WHERE_TERM_API[termApi as keyof typeof WHERE_TERM_API];\n            (<any>this)[whereTermApi] = function (data: TermData) {\n                return this.whereTermApiFn(termApi, data);\n            };\n        }\n    }\n\n    whereTermApiFn(termApi: string, data: TermData): this {\n        this.getWhereTermCase()[termApi](data);\n        return this;\n    }\n\n    whereBracket(): this {\n        this.getWhereTermCase().bracket();\n        return this;\n    }\n\n    whereOrBracket(): this {\n        this.getWhereTermCase().orBracket();\n        return this;\n    }\n\n    where(sql?: any): this {\n        if (Type.undefined.isNot(sql)) {\n            const term: Term = this.getWhereTermCase();\n            if (Type.func.is(sql)) {\n                sql = sql.bind(this, term);\n            }\n            term.sqlTerm(sql);\n        } else {\n            this.termStatus = TermTypes.where;\n        }\n        return this;\n    }\n\n    protected getWhereTermCase(): any {\n        return this.getTermCase(TermTypes.where);\n    }\n\n    protected whereBuild(query: string): string {\n        const whereTerm: Term = this.getWhereTermCase();\n        const whereSql: string = whereTerm.termsBuild();\n        if (Type.string.isNotEmpty(whereSql)) {\n            query = `${query} WHERE ${whereSql}`;\n        }\n        return query;\n    }\n\n    whereEqual: (data: TermData) => this = (data) => this;\n    whereNotEqual: (data: TermData) => this = (data) => this;\n    whereIn: (data: TermData) => this = (data) => this;\n    whereNotIn: (data: TermData) => this = (data) => this;\n    whereMore: (data: TermData) => this = (data) => this;\n    whereLess: (data: TermData) => this = (data) => this;\n    whereMoreEqual: (data: TermData) => this = (data) => this;\n    whereLessEqual: (data: TermData) => this = (data) => this;\n    whereLike: (data: TermData) => this = (data) => this;\n    whereNotLike: (data: TermData) => this = (data) => this;\n    whereBetween: (data: TermData) => this = (data) => this;\n    whereNotBetween: (data: TermData) => this = (data) => this;\n    whereOrEqual: (data: TermData) => this = (data) => this;\n    whereOrNotEqual: (data: TermData) => this = (data) => this;\n    whereOrIn: (data: TermData) => this = (data) => this;\n    whereOrNotIn: (data: TermData) => this = (data) => this;\n    whereOrMore: (data: TermData) => this = (data) => this;\n    whereOrLess: (data: TermData) => this = (data) => this;\n    whereOrMoreEqual: (data: TermData) => this = (data) => this;\n    whereOrLessEqual: (data: TermData) => this = (data) => this;\n    whereOrLike: (data: TermData) => this = (data) => this;\n    whereOrNotLike: (data: TermData) => this = (data) => this;\n    whereOrBetween: (data: TermData) => this = (data) => this;\n    whereOrNotBetween: (data: TermData) => this = (data) => this;\n}\n\nexport default Where;\n","import { TermData, SqlParam } from \"../constant/interface\";\nimport Where from \"./where\";\nimport Term from \"./term\";\nimport { Type } from \"schema-verify\";\nimport { TermTypes } from \"../constant/enum\";\nimport { HAVING_TERM_API } from \"../constant/constant\";\n\nclass Having extends Where {\n    protected havingTerm: Term = {} as Term;\n\n    constructor() {\n        super();\n        for (const termApi in HAVING_TERM_API) {\n            const havingTermApi =\n                HAVING_TERM_API[termApi as keyof typeof HAVING_TERM_API];\n            (<any>this)[havingTermApi] = function (data: TermData) {\n                return this.havingTermApiFn(termApi, data);\n            };\n        }\n    }\n\n    havingTermApiFn(termApi: string, data: TermData): this {\n        this.getHavingTermCase()[termApi](data);\n        return this;\n    }\n\n    havingBracket(): this {\n        this.getHavingTermCase().bracket();\n        return this;\n    }\n\n    havingOrBracket(): this {\n        this.getHavingTermCase().orBracket();\n        return this;\n    }\n\n    having(sql: any): this {\n        if (Type.undefined.isNot(sql)) {\n            const term: Term = this.getHavingTermCase();\n            if (Type.func.is(sql)) {\n                sql = sql.bind(this, term);\n            }\n            term.sqlTerm(sql);\n        } else {\n            this.termStatus = TermTypes.having;\n        }\n        return this;\n    }\n\n    protected getHavingTermCase(): any {\n        return this.getTermCase(TermTypes.having);\n    }\n\n    protected havingBuild(query: string) {\n        const termInstance: Term = this.getHavingTermCase();\n        const havingSql: string = termInstance.termsBuild();\n        if (Type.string.isNotEmpty(havingSql)) {\n            query = `${query} HAVING ${havingSql}`;\n        }\n        return query;\n    }\n\n    havingEqual: (data: TermData) => this = (data) => this;\n    havingNotEqual: (data: TermData) => this = (data) => this;\n    havingIn: (data: TermData) => this = (data) => this;\n    havingNotIn: (data: TermData) => this = (data) => this;\n    havingMore: (data: TermData) => this = (data) => this;\n    havingLess: (data: TermData) => this = (data) => this;\n    havingMoreEqual: (data: TermData) => this = (data) => this;\n    havingLessEqual: (data: TermData) => this = (data) => this;\n    havingLike: (data: TermData) => this = (data) => this;\n    havingNotLike: (data: TermData) => this = (data) => this;\n    havingBetween: (data: TermData) => this = (data) => this;\n    havingNotBetween: (data: TermData) => this = (data) => this;\n    havingOrEqual: (data: TermData) => this = (data) => this;\n    havingOrNotEqual: (data: TermData) => this = (data) => this;\n    havingOrIn: (data: TermData) => this = (data) => this;\n    havingOrNotIn: (data: TermData) => this = (data) => this;\n    havingOrMore: (data: TermData) => this = (data) => this;\n    havingOrLess: (data: TermData) => this = (data) => this;\n    havingOrMoreEqual: (data: TermData) => this = (data) => this;\n    havingOrLessEqual: (data: TermData) => this = (data) => this;\n    havingOrLike: (data: TermData) => this = (data) => this;\n    havingOrNotLike: (data: TermData) => this = (data) => this;\n    havingOrBetween: (data: TermData) => this = (data) => this;\n    havingOrNotBetween: (data: TermData) => this = (data) => this;\n}\n\nexport default Having;\n","import { FuncTypes } from \"../constant/enum\";\nimport { FuncInfo } from \"../constant/interface\";\nimport { Type } from \"schema-verify\";\nimport Base from \"./base\";\n\nclass Func extends Base {\n    protected funcField(func: FuncTypes, field?: number | string): FuncInfo {\n        const needSafeTrans: boolean =\n            Type.string.isNotEmpty(field) && field !== \"*\";\n        const fieldStr: string = needSafeTrans\n            ? <string>field\n            : Type.number.is(field)\n            ? field + \"\"\n            : \"*\";\n        const safeField: string = needSafeTrans\n            ? this.safeKey(fieldStr)\n            : fieldStr;\n        const funcInfo: FuncInfo = {\n            funcFeild: `${func}(${safeField})`\n        };\n        return funcInfo;\n    }\n\n    count(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.count, field);\n    }\n\n    sum(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.sum, field);\n    }\n\n    max(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.max, field);\n    }\n\n    min(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.min, field);\n    }\n\n    avg(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.avg, field);\n    }\n\n    abs(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.abs, field);\n    }\n\n    ceil(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.ceil, field);\n    }\n\n    floor(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.floor, field);\n    }\n\n    round(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.round, field);\n    }\n\n    log(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.log, field);\n    }\n\n    log2(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.log2, field);\n    }\n\n    exp(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.exp, field);\n    }\n\n    power(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.power, field);\n    }\n\n    acos(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.acos, field);\n    }\n\n    asin(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.asin, field);\n    }\n\n    atan(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.atan, field);\n    }\n\n    cos(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.cos, field);\n    }\n\n    sin(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.sin, field);\n    }\n\n    tan(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.tan, field);\n    }\n\n    conv(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.conv, field);\n    }\n\n    random(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.random, field);\n    }\n\n    rand(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.rand, field);\n    }\n\n    radians(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.radians, field);\n    }\n\n    degrees(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.degrees, field);\n    }\n\n    distinct(field?: number | string): FuncInfo {\n        return this.funcField(FuncTypes.distinct, field);\n    }\n}\n\nexport default Func;\n","import Having from \"./having\";\nimport Func from \"./func\";\nimport { Type } from \"schema-verify\";\nimport { FuncInfo } from \"../constant/interface\";\nimport ErrMsg from \"../error/builder/index\";\nimport {\n    strArrVerify,\n    funcInfoVerify,\n    funcInputVerify,\n} from \"../verify/builder/index\";\n\ninterface FuncInput {\n    func: string;\n    field: string | number;\n}\n\nclass Combine extends Having {\n    protected combineFuncs: FuncInfo[];\n    protected funcInstance: Func = {} as Func;\n    protected groupByFields: string[] = [];\n    constructor() {\n        super();\n        this.combineFuncs = [];\n    }\n\n    protected groupBuild(query: string): string {\n        const fields: string[] = this.groupByFields;\n        if (!Type.array.isNotEmpty(fields)) {\n            return query;\n        }\n        const fieldsStr: string = fields\n            .map((field) => this.safeKey(field))\n            .join(\", \");\n        query = `${query} GROUP BY ${fieldsStr}`;\n        return query;\n    }\n\n    groupBy(...fields: string[]): this {\n        let groupByFields: string[] = Type.array.safe(this.groupByFields);\n        if (!strArrVerify(fields)) {\n            throw new Error(ErrMsg.errorFields);\n        }\n        groupByFields = groupByFields.concat(fields);\n        this.groupByFields = Array.from(new Set(groupByFields));\n        return this;\n    }\n\n    protected getFuncCase(): Func {\n        let func: Func = this.funcInstance;\n        if (!func || !(func instanceof Func)) {\n            func = new Func();\n            func.setDialect(this.dialectType);\n            this.funcInstance = func;\n        }\n        return func;\n    }\n\n    protected formatFuncs(): string[] {\n        const combineFuncs: FuncInfo[] = Type.array.safe(this.combineFuncs);\n        let funcs: string[] = [];\n        for (const info of combineFuncs) {\n            if (!funcInfoVerify(info)) {\n                throw new Error(ErrMsg.errorFuncInfo);\n            }\n            const funcFeild: string = info.funcFeild;\n            funcs.push(funcFeild);\n        }\n        funcs = Array.from(new Set(funcs));\n        return funcs;\n    }\n\n    protected funcsCache(funcInfo: FuncInfo): this {\n        const combineFuncs: FuncInfo[] = Type.array.safe(this.combineFuncs);\n        if (funcInfoVerify(funcInfo)) {\n            combineFuncs.push(funcInfo);\n        }\n        this.combineFuncs = combineFuncs;\n        return this;\n    }\n\n    funcFeilds(...funcInfos: FuncInfo[] | FuncInput[]): this {\n        for (let info of funcInfos) {\n            info = Type.object.safe(info);\n            if (funcInfoVerify(info)) {\n                this.funcsCache(<FuncInfo>info);\n                continue;\n            }\n            const funcCase = this.getFuncCase();\n            if (funcInputVerify(info)) {\n                const func: string = (<FuncInput>info).func;\n                const field: string | number = (<FuncInput>info).field;\n                if (\n                    Type.object.is(funcCase) &&\n                    Type.func.is((<any>funcCase)[func])\n                ) {\n                    const funcInfo: FuncInfo = (<any>funcCase)[func].call(\n                        funcCase,\n                        field\n                    );\n                    this.funcsCache(funcInfo);\n                }\n                continue;\n            }\n        }\n        return this;\n    }\n\n    count(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().count(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    sum(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().sum(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    max(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().max(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    min(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().min(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    avg(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().avg(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    abs(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().abs(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    ceil(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().ceil(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    floor(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().floor(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    round(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().round(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    log(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().log(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    log2(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().log2(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    exp(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().exp(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    power(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().power(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    acos(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().acos(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    asin(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().asin(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    atan(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().atan(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    cos(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().cos(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    sin(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().sin(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    tan(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().tan(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    conv(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().conv(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    random(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().random(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    rand(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().rand(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    radians(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().radians(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    degrees(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().degrees(field);\n        return this.funcsCache(funcInfo);\n    }\n\n    distinct(field?: number | string): this {\n        const funcInfo: FuncInfo = this.getFuncCase().distinct(field);\n        return this.funcsCache(funcInfo);\n    }\n}\n\nexport default Combine;\n","import { argStrArrTrans } from \"../util/util\";\nimport Combine from \"./combine\";\nimport { Type } from \"schema-verify\";\nimport {\n    TableFieldsMap,\n    TableFieldsAsMap,\n    JoinTableInfo,\n    JoinTypeInfo,\n    JoinTermInfo,\n    KeyValueStr,\n} from \"../constant/interface\";\nimport { JoinTypes } from \"../constant/enum\";\nimport {\n    fieldsMapVerify,\n    fieldsAsMapVerify,\n    joinInfoVerify,\n} from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\nclass Join extends Combine {\n    protected queryTables: string[] = [];\n    protected tableFieldsMap: TableFieldsMap = {};\n    protected tableFieldsAsMap: TableFieldsAsMap = {};\n    protected joinTypeInfos: JoinTypeInfo[] = [];\n    constructor() {\n        super();\n    }\n\n    protected getQueryTables(): string {\n        const queryTables: string = Type.array\n            .safe(this.queryTables)\n            .map((table: string) => {\n                return this.safeKey(table);\n            })\n            .join(\", \");\n        return queryTables;\n    }\n\n    protected formatJoinFields(): string[] {\n        const tableFieldsMap: TableFieldsMap = Type.object.safe(\n            this.tableFieldsMap\n        );\n        const tableFieldsAsMap: TableFieldsAsMap = Type.object.safe(\n            this.tableFieldsAsMap\n        );\n        const result: string[] = [];\n        for (const table in tableFieldsMap) {\n            const fields: string[] = Type.array.safe(tableFieldsMap[table]);\n            const asMap: KeyValueStr = Type.object.safe(\n                tableFieldsAsMap[table]\n            );\n            const safeTable: string = this.safeKey(table);\n            for (const field of fields) {\n                if (!Type.string.isNotEmpty(field)) {\n                    continue;\n                }\n                const safeField: string = this.safeKey(field);\n                const tableField: string = `${safeTable}.${safeField}`;\n                if (Type.string.isNotEmpty(asMap[field])) {\n                    const safeAsField = this.safeKey(asMap[field]);\n                    result.push(`${tableField} AS ${safeAsField}`);\n                } else {\n                    result.push(tableField);\n                }\n            }\n        }\n        return result;\n    }\n\n    protected joinBuild(query: string) {\n        const joinTypeInfos: JoinTypeInfo[] = Type.array.safe(\n            this.joinTypeInfos\n        );\n        if (!Type.array.isNotEmpty(joinTypeInfos)) {\n            return query;\n        }\n        const joinStrs: string[] = [];\n        for (const typeInfo of joinTypeInfos) {\n            const type: JoinTypes = typeInfo.type;\n            const info: JoinTableInfo = Type.object.safe(typeInfo.info);\n            const tableName: string = info.tableName;\n            const termInfos: JoinTermInfo[] = Type.array.safe(info.termInfos);\n            const termStrs: string[] = this.joinTermBuild(termInfos);\n            const safeTableName: string = this.safeKey(tableName);\n            let joinInfoStr: string = `${type} JOIN ${safeTableName}`;\n            if (Type.array.isNotEmpty(termStrs)) {\n                const allTermStr = termStrs.join(\" AND \");\n                joinInfoStr += ` ON ${allTermStr}`;\n            }\n            joinStrs.push(joinInfoStr);\n        }\n        if (!Type.array.isNotEmpty(joinStrs)) {\n            return query;\n        }\n        const allJoinStr = joinStrs.join(\" \");\n        query = `${query} ${allJoinStr}`;\n        return query;\n    }\n\n    protected joinTermBuild(termInfos: JoinTermInfo[]) {\n        const result: string[] = [];\n        for (const termInfo of termInfos) {\n            const symbol: string = termInfo.symbol;\n            const tableFields: KeyValueStr = termInfo.tableFields;\n            let termStr: string = \"\";\n            for (const table in tableFields) {\n                const field = tableFields[table];\n                const safeTable: string = this.safeKey(table);\n                const safeField: string = this.safeKey(field);\n                if (Type.string.isNotEmpty(termStr)) {\n                    termStr += ` ${symbol} `;\n                }\n                termStr += `${safeTable}.${safeField}`;\n            }\n            result.push(`(${termStr})`);\n        }\n        return result;\n    }\n\n    multiTables(arg: any, ...otherArgs: any[]): this {\n        const queryTables: string[] = Type.array.safe(this.queryTables);\n        const args: any[] = argStrArrTrans(arg, otherArgs);\n        const tables: string[] = [];\n        for (const item of args) {\n            if (Type.string.isNotEmpty(item)) {\n                tables.push(item);\n            }\n        }\n        this.queryTables = Array.from(new Set(queryTables.concat(tables)));\n        return this;\n    }\n\n    tableFields(fieldsMap: TableFieldsMap): this {\n        const tableFieldsMap: TableFieldsMap = Type.object.safe(\n            this.tableFieldsMap\n        );\n        if (!fieldsMapVerify(fieldsMap)) {\n            throw new Error(ErrMsg.tableFieldsError);\n        }\n        this.tableFieldsMap = Object.assign({}, tableFieldsMap, fieldsMap);\n        return this;\n    }\n\n    tableAsMap(asMap: TableFieldsAsMap): this {\n        const tableFieldsAsMap: TableFieldsAsMap = Type.object.safe(\n            this.tableFieldsAsMap\n        );\n        if (!fieldsAsMapVerify(asMap)) {\n            throw new Error(ErrMsg.tableFieldsAsMapError);\n        }\n        this.tableFieldsAsMap = Object.assign({}, tableFieldsAsMap, asMap);\n        return this;\n    }\n\n    protected join(joinInfo: JoinTableInfo, type: JoinTypes): this {\n        const joinTypeInfos: JoinTypeInfo[] = Type.array.safe(\n            this.joinTypeInfos\n        );\n        if (!joinInfoVerify(joinInfo)) {\n            throw new Error(ErrMsg.joinTableInfoError);\n        }\n        const typeInfo: JoinTypeInfo = {\n            type: type,\n            info: joinInfo,\n        };\n        joinTypeInfos.push(typeInfo);\n        this.joinTypeInfos = joinTypeInfos;\n        return this;\n    }\n\n    innerJoin(joinInfo: JoinTableInfo): this {\n        this.join(joinInfo, JoinTypes.inner);\n        return this;\n    }\n\n    leftJoin(joinInfo: JoinTableInfo): this {\n        this.join(joinInfo, JoinTypes.left);\n        return this;\n    }\n\n    rightJoin(joinInfo: JoinTableInfo): this {\n        this.join(joinInfo, JoinTypes.right);\n        return this;\n    }\n}\n\nexport default Join;\n","import { argStrArrTrans } from \"../util/util\";\nimport Join from \"./join\";\nimport { KeyValueStr } from \"../constant/interface\";\nimport { QueryTypes } from \"../constant/enum\";\nimport { Type } from \"schema-verify\";\nimport { strArrVerify, strObjVerify } from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\nclass Select extends Join {\n    protected selectFields: string[];\n    protected fieldsAsMap: KeyValueStr;\n    constructor() {\n        super();\n        this.selectFields = [];\n        this.fieldsAsMap = {};\n    }\n\n    protected formatFields(): string[] {\n        const fields: string[] = Type.array.safe(this.selectFields);\n        const asMap: KeyValueStr = Type.object.safe(this.fieldsAsMap);\n        const result: string[] = [];\n        for (const field of fields) {\n            if (!Type.string.isNotEmpty(field)) {\n                continue;\n            }\n            const safeField = field !== \"*\" ? this.safeKey(field) : \"*\";\n            if (Type.string.isNotEmpty(asMap[field])) {\n                const safeAsField = this.safeKey(asMap[field]);\n                result.push(`${safeField} AS ${safeAsField}`);\n            } else {\n                result.push(safeField);\n            }\n        }\n        return result;\n    }\n\n    protected formatFieldStr(): string {\n        let fields: string[] = this.formatFields();\n        let joinFields: string[] = this.formatJoinFields();\n        let funcs: string[] = this.formatFuncs();\n        let result: string;\n        if (\n            strArrVerify(fields) ||\n            strArrVerify(funcs) ||\n            strArrVerify(joinFields)\n        ) {\n            fields = Type.array.safe(fields);\n            joinFields = Type.array.safe(joinFields);\n            funcs = Type.array.safe(funcs);\n            result = (<string[]>[]).concat(fields, joinFields, funcs).join(\", \");\n        } else {\n            result = \"*\";\n        }\n        return result;\n    }\n\n    protected formatTableStr(): string {\n        const tablesStr: string = this.getQueryTables();\n        if (Type.string.isNotEmpty(tablesStr)) {\n            return tablesStr;\n        }\n        const table: string = this.getQueryTable();\n        return table;\n    }\n\n    build(): string {\n        const table: string = this.formatTableStr();\n        const fieldsStr: string = this.formatFieldStr();\n        let query: string = `${QueryTypes.select} ${fieldsStr} FROM ${table}`;\n        query = this.whereBuild(query);\n        query = this.groupBuild(query);\n        query = this.havingBuild(query);\n        query = this.orderBuild(query);\n        query = this.limitBuild(query);\n        query = this.joinBuild(query);\n        return query;\n    }\n\n    fields(arg: any, ...otherArgs: any[]): this {\n        const selectFields: string[] = Type.array.safe(this.selectFields);\n        const args: any[] = argStrArrTrans(arg, otherArgs);\n        const fields: string[] = [];\n        for (const item of args) {\n            if (Type.object.isNotEmpty(item)) {\n                this.funcFeilds(item);\n                continue;\n            }\n            if (Type.string.isNotEmpty(item)) {\n                fields.push(item);\n            }\n        }\n        this.selectFields = Array.from(new Set(selectFields.concat(fields)));\n        if (this.selectFields.includes(\"*\")) {\n            this.selectFields = [\"*\"];\n        }\n        return this;\n    }\n\n    asMap(map: KeyValueStr): this {\n        const asMap: KeyValueStr = Type.object.safe(this.fieldsAsMap);\n        if (!strObjVerify(map)) {\n            throw new Error(ErrMsg.errorFieldMap);\n        }\n        this.fieldsAsMap = Object.assign({}, asMap, map);\n        return this;\n    }\n\n    limit(offset: number, step?: number): this {\n        this.getLimitCase().limit(offset, step);\n        return this;\n    }\n\n    paging(page: number, size: number): this {\n        this.getLimitCase().paging(page, size);\n        return this;\n    }\n\n    findOne(): this {\n        this.getLimitCase().step(1);\n        return this;\n    }\n}\n\nexport default Select;\n","import { QueryTypes, UpdateTypes } from \"../constant/enum\";\nimport { FieldData } from \"../constant/interface\";\nimport Where from \"./where\";\nimport { Type } from \"schema-verify\";\nimport {\n    strArrVerify,\n    fieldDataVerify,\n    updateInfoVerify\n} from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\ninterface UpdateInfo {\n    value: string | number;\n    type: UpdateTypes;\n}\ninterface UpdateInfos {\n    [propName: string]: UpdateInfo;\n}\n\nclass Update extends Where {\n    protected updateInfos: UpdateInfos;\n    constructor() {\n        super();\n        this.updateInfos = {};\n    }\n\n    build(): string {\n        const table: string = this.getQueryTable();\n        const data: string[] = this.formatData();\n        const dataStr: string = data.join(\", \");\n        let query: string = `${QueryTypes.update} ${table} SET ${dataStr}`;\n        query = this.whereBuild(query);\n        query = this.orderBuild(query);\n        query = this.limitBuild(query);\n        return query;\n    }\n\n    protected formatData(): string[] {\n        const updateInfos: UpdateInfos = this.updateInfos;\n        if (!Type.object.isNotEmpty(updateInfos)) {\n            throw new Error(ErrMsg.emptyUpdateInfo);\n        }\n        const result: string[] = [];\n        for (const field in updateInfos) {\n            const info: UpdateInfo = updateInfos[field];\n            if (!updateInfoVerify(info)) {\n                continue;\n            }\n            const type: string = info.type;\n            const value: string | number = info.value;\n            const safeValue: string = this.safeValue(value);\n            const safeField: string = this.safeKey(field);\n            let infoStr: string = \"\";\n            switch (type) {\n                case UpdateTypes.set:\n                    infoStr = `${safeField} = ${safeValue}`;\n                    break;\n                case UpdateTypes.add:\n                    infoStr = `${safeField} = ${safeField} + ${safeValue}`;\n                    break;\n                case UpdateTypes.minus:\n                    infoStr = `${safeField} = ${safeField} - ${safeValue}`;\n                    break;\n            }\n            if (Type.string.isNotEmpty(infoStr)) {\n                result.push(infoStr);\n            }\n        }\n        if (!strArrVerify(result)) {\n            throw new Error(ErrMsg.emptyUpdateInfo);\n        }\n        return result;\n    }\n\n    protected updateCache(data: FieldData, type: UpdateTypes): this {\n        if (!fieldDataVerify(data)) {\n            throw new Error(ErrMsg.errorFieldData);\n        }\n        const updateInfos: UpdateInfos = Type.object.safe(this.updateInfos);\n        for (const field in data) {\n            const value = data[field];\n            const updateInfo = {\n                value,\n                type\n            };\n            if (!updateInfoVerify(updateInfo)) {\n                throw new Error(ErrMsg.errorUpdateInfo);\n            }\n            updateInfos[field] = updateInfo;\n        }\n        this.updateInfos = updateInfos;\n        return this;\n    }\n\n    set(data: FieldData): this {\n        return this.updateCache(data, UpdateTypes.set);\n    }\n\n    add(data: FieldData): this {\n        return this.updateCache(data, UpdateTypes.add);\n    }\n\n    minus(data: FieldData): this {\n        return this.updateCache(data, UpdateTypes.minus);\n    }\n}\n\nexport default Update;\n","import { QueryTypes } from \"../constant/enum\";\nimport Where from \"./where\";\n\nclass Delete extends Where {\n    build(): string {\n        const table: string = this.getQueryTable();\n        let query: string = `${QueryTypes.delete} FROM ${table}`;\n        query = this.whereBuild(query);\n        query = this.orderBuild(query);\n        query = this.limitBuild(query);\n        return query;\n    }\n}\n\nexport default Delete;\n","import Insert from \"./insert\";\nimport { QueryTypes } from \"../constant/enum\";\n\nclass Replace extends Insert {\n    constructor() {\n        super();\n        this.queryType = QueryTypes.replace;\n    }\n}\n\nexport default Replace;\n","import Base from \"./base\";\nimport { TableOptions } from \"../constant/enum\";\nimport { TABLE_OPT_VALUES, FEILD_TEMPLATE } from \"../constant/constant\";\nimport { DialectTypes } from \"../constant/enum\";\nimport { Type } from \"schema-verify\";\nimport { tableInfoVerify } from \"../verify/builder/index\";\nimport { analyTmpl } from \"../util/util\";\nimport ErrMsg from \"../error/builder/index\";\n\nexport interface TableField {\n    field: string;\n    type: string;\n    unsigned?: boolean;\n    autoIncrement?: boolean;\n    notNull?: boolean;\n    default?: string | number;\n    onUpdate?: string;\n    comment?: string;\n}\nexport interface combineKey {\n    keyName: string;\n    combineFields: string[];\n}\nexport interface TableInfo {\n    tableName: string;\n    primaryKey: string | combineKey;\n    uniqueKey?: string | combineKey;\n    engine?: string;\n    autoIncrement?: number;\n    defaultCharset?: string;\n    comment?: string;\n    fields: TableField[];\n}\n\nconst TABLE_TEMPLATE = `CREATE TABLE IF NOT EXISTS {{tableName}}( {{feildsStr}}) {{tableOptionsStr}}`;\nconst TABLE_OPTIONS_TEMPLATE = `{{engine}}{{autoIncrement}}{{defaultCharset}}{{comment}}`;\nconst DATABASE_TEMPLATE = `CREATE DATABASE {{dbName}}`;\n\nclass Create extends Base {\n    protected createTableSqlStr: string = \"\";\n    protected createDbName: string = \"\";\n    protected createTableInfo: TableInfo = {} as TableInfo;\n    constructor() {\n        super();\n    }\n\n    checkDialect() {\n        const dialectType: DialectTypes = this._dialectType;\n        if (dialectType !== DialectTypes.mysql) {\n            throw new Error(ErrMsg.notSupportDialect);\n        }\n    }\n\n    info(tableInfo: TableInfo | string): this {\n        if (Type.string.isNotEmpty(tableInfo)) {\n            this.createTableSqlStr = <string>tableInfo;\n        } else if (tableInfoVerify(tableInfo, true)) {\n            this.createTableInfo = <TableInfo>tableInfo;\n        }\n        return this;\n    }\n\n    dataBase(dbName: string): this {\n        if (!Type.string.isNotEmpty(dbName)) {\n            throw new Error(ErrMsg.errorCreateDbName);\n        }\n        this.createDbName = dbName;\n        return this;\n    }\n\n    build(): string {\n        const createDbName: string = this.createDbName;\n        if (Type.string.isNotEmpty(createDbName)) {\n            const tmplOpts = {\n                dbName: createDbName,\n            };\n            const query: string = analyTmpl(DATABASE_TEMPLATE, tmplOpts);\n            return query;\n        }\n        const tableSqlStr: string = this.createTableSqlStr;\n        if (Type.string.isNotEmpty(tableSqlStr)) {\n            return tableSqlStr;\n        }\n        const tableInfo: TableInfo = this.createTableInfo;\n        tableInfoVerify(tableInfo, true);\n        const query: string = this.tableTmpl(tableInfo);\n        return query;\n    }\n\n    protected tableTmpl(info: TableInfo): string {\n        const tableName: string = info.tableName;\n        const feildsStr: string = this.feildsStr(info);\n        const tableOptionsStr: string = this.tableOptsStr(info);\n        const tmplOpts = {\n            tableName,\n            feildsStr,\n            tableOptionsStr,\n        };\n        const tableInfoStr: string = analyTmpl(TABLE_TEMPLATE, tmplOpts) + \";\";\n        return tableInfoStr;\n    }\n\n    protected feildsStr(info: TableInfo): string {\n        const primaryKey: string | combineKey = info.primaryKey;\n        const uniqueKey = info.uniqueKey;\n        const fields: TableField[] = info.fields;\n        const feildTmplArr: string[] = [];\n\n        for (const fieldInfo of fields) {\n            const feildStr: string = this.feildTmpl(fieldInfo);\n            feildTmplArr.push(feildStr);\n        }\n\n        const primaryKeyStr: string = this.primaryKeyStr(primaryKey);\n        const uniqueKeyStr: string = this.uniqueKeyStr(<string>uniqueKey);\n\n        if (Type.string.isNotEmpty(primaryKeyStr)) {\n            feildTmplArr.push(primaryKeyStr);\n        }\n\n        if (Type.string.isNotEmpty(uniqueKeyStr)) {\n            feildTmplArr.push(uniqueKeyStr);\n        }\n\n        return feildTmplArr.join(\",\");\n    }\n\n    protected feildTmpl(fieldInfo: TableField): string {\n        const field: string = this.safeKey(fieldInfo.field);\n        const type: string = fieldInfo.type.toUpperCase();\n        const unsigned = fieldInfo.unsigned;\n        const notNull = fieldInfo.notNull;\n        let defaultValue = fieldInfo.default;\n        const autoIncrement = fieldInfo.autoIncrement;\n        const onUpdate = fieldInfo.onUpdate;\n        let comment = fieldInfo.comment;\n\n        const tmplOpts: any = {\n            field,\n            type,\n        };\n\n        if (unsigned === true) {\n            tmplOpts[\"unsigned\"] = TableOptions.unsigned;\n        }\n\n        if (notNull === true) {\n            tmplOpts[\"notNull\"] = TableOptions.notNull;\n        }\n\n        if (Type.string.is(defaultValue) || Type.number.is(defaultValue)) {\n            let needSafe = true;\n            let upperValue;\n            if (Type.string.is(defaultValue)) {\n                upperValue = (<string>defaultValue).toUpperCase();\n                needSafe = !TABLE_OPT_VALUES.includes(upperValue);\n            }\n            defaultValue = needSafe\n                ? this.safeValue(<string>defaultValue)\n                : upperValue;\n            tmplOpts[\"default\"] = `${TableOptions.default} ${defaultValue}`;\n        }\n\n        if (autoIncrement === true) {\n            tmplOpts[\"autoIncrement\"] = TableOptions.autoIncrement;\n        }\n\n        if (Type.string.isNotEmpty(onUpdate)) {\n            tmplOpts[\"onUpdate\"] = `${TableOptions.onUpdate} ${onUpdate}`;\n        }\n\n        if (Type.string.isNotEmpty(comment)) {\n            comment = this.safeValue(<string>comment);\n            tmplOpts[\"comment\"] = `${TableOptions.comment} ${comment}`;\n        }\n\n        const feildStr: string = analyTmpl(FEILD_TEMPLATE, tmplOpts);\n\n        return feildStr;\n    }\n\n    protected primaryKeyStr(keyInfo: string | combineKey): string {\n        let result: string = \"\";\n        const primaryKey = TableOptions.primaryKey;\n\n        if (Type.string.isNotEmpty(keyInfo)) {\n            const value = this.safeKey(<string>keyInfo);\n            result = `${value} ${primaryKey} (${value})`;\n        }\n\n        if (Type.object.is(keyInfo)) {\n            const keyName: string = this.safeKey((<combineKey>keyInfo).keyName);\n            const combineFields = (<combineKey>keyInfo).combineFields;\n            const combineFieldsStr = combineFields\n                .map((field) => this.safeKey(field))\n                .join(\",\");\n            result = `${keyName} ${primaryKey} (${combineFieldsStr})`;\n        }\n\n        return `${TableOptions.constraint} ${result}`;\n    }\n\n    protected uniqueKeyStr(keyInfo: string | combineKey): string {\n        let result: string = \"\";\n        const uniqueKey = TableOptions.uniqueKey;\n\n        if (Type.string.isNotEmpty(keyInfo)) {\n            const value = this.safeKey(<string>keyInfo);\n            result = `${value} ${uniqueKey} (${value})`;\n        }\n\n        if (Type.object.is(keyInfo)) {\n            const keyName: string = this.safeKey((<combineKey>keyInfo).keyName);\n            const combineFields = (<combineKey>keyInfo).combineFields;\n            const combineFieldsStr = combineFields\n                .map((field) => this.safeKey(field))\n                .join(\",\");\n            result = `${keyName} ${uniqueKey} (${combineFieldsStr})`;\n        }\n\n        return `${TableOptions.constraint} ${result}`;\n    }\n\n    protected tableOptsStr(info: TableInfo): string {\n        const engine = info.engine;\n        const autoIncrement = info.autoIncrement;\n        const defaultCharset = info.defaultCharset;\n        const comment = info.comment;\n        const tmplOpts: any = {};\n\n        if (Type.string.isNotEmpty(engine)) {\n            const key = TableOptions.engine;\n            const value = engine;\n            tmplOpts[\"engine\"] = `${key}=${value}`;\n        }\n\n        if (Type.number.is(autoIncrement)) {\n            const key = TableOptions.autoIncrement;\n            const value = autoIncrement;\n            tmplOpts[\"autoIncrement\"] = `${key}=${value}`;\n        }\n\n        if (Type.string.isNotEmpty(defaultCharset)) {\n            const key = TableOptions.defaultCharset;\n            const value = defaultCharset;\n            tmplOpts[\"defaultCharset\"] = `${key}=${value}`;\n        }\n\n        if (Type.string.isNotEmpty(comment)) {\n            const key = TableOptions.comment;\n            const value = this.safeValue(<string>comment);\n            tmplOpts[\"comment\"] = `${key}=${value}`;\n        }\n        const tableOptionsStr: string = analyTmpl(\n            TABLE_OPTIONS_TEMPLATE,\n            tmplOpts\n        );\n        return tableOptionsStr;\n    }\n}\n\nexport default Create;\n","import Base from \"./base\";\nimport { TableOptions, AlterMethods, DialectTypes } from \"../constant/enum\";\nimport { TABLE_OPT_VALUES, FEILD_TEMPLATE } from \"../constant/constant\";\nimport { Type } from \"schema-verify\";\nimport { analyTmpl } from \"../util/util\";\nimport { alterInfosVerify } from \"../verify/builder/index\";\nimport ErrMsg from \"../error/builder/index\";\n\nconst ALTER_TEMPLATE = `ALTER TABLE {{queryTable}}{{alterInfosStr}}`;\nconst ALTER_INFOS_TEMPLATE = `{{method}}COLUMN {{field}}{{alterFieldStr}}`;\n\nexport interface AlterField {\n    field?: string;\n    type?: string;\n    unsigned?: boolean;\n    autoIncrement?: boolean;\n    notNull?: boolean;\n    default?: string | number;\n    onUpdate?: string;\n    comment?: string;\n}\ninterface AlterInfo {\n    method: AlterMethods;\n    field: string;\n    alterField: AlterField;\n}\n\nclass Alter extends Base {\n    protected alterInfos: AlterInfo[] = [];\n    constructor() {\n        super();\n    }\n\n    checkDialect(): void {\n        const dialectType: DialectTypes = this._dialectType;\n        if (dialectType !== DialectTypes.mysql) {\n            throw new Error(ErrMsg.notSupportDialect);\n        }\n    }\n\n    add(field: string | AlterField, alterField: AlterField = {}): this {\n        if (Type.object.is(field)) {\n            alterField = <AlterField>field;\n            field = alterField.field || \"\";\n        }\n        delete alterField[\"field\"];\n        return this.alterCache(AlterMethods.add, <string>field, alterField);\n    }\n\n    drop(field: string): this {\n        return this.alterCache(AlterMethods.drop, field, {});\n    }\n\n    modify(field: string, alterField: AlterField): this {\n        delete alterField[\"field\"];\n        return this.alterCache(AlterMethods.modify, field, alterField);\n    }\n\n    change(field: string, alterField: AlterField): this {\n        return this.alterCache(AlterMethods.change, field, alterField);\n    }\n\n    protected alterCache(\n        method: AlterMethods,\n        field: string,\n        alterField: AlterField\n    ): this {\n        if (\n            AlterMethods.drop !== method &&\n            !Type.object.isNotEmpty(alterField)\n        ) {\n            throw new Error(ErrMsg.errorAlterField);\n        }\n        const alterInfo: AlterInfo = {\n            method,\n            field,\n            alterField,\n        };\n        if (!alterInfosVerify(alterInfo)) {\n            throw new Error(ErrMsg.errorAlterField);\n        }\n        const alterInfos: AlterInfo[] = Type.array.safe(this.alterInfos);\n        alterInfos.push(alterInfo);\n        this.alterInfos = alterInfos;\n        return this;\n    }\n\n    build(): string {\n        const alterInfos: AlterInfo[] = Type.array.safe(this.alterInfos);\n        const infosStrArr: string[] = [];\n\n        for (const item of alterInfos) {\n            if (!alterInfosVerify(item)) {\n                continue;\n            }\n            const method: string = item.method;\n            const field: string = this.safeKey(item.field);\n            const alterField: AlterField = item.alterField;\n            const alterFieldStr: string = this.feildTmpl(alterField);\n            const tmplOpts = {\n                method,\n                field,\n                alterFieldStr,\n            };\n            const alterInfoStr: string = analyTmpl(\n                ALTER_INFOS_TEMPLATE,\n                tmplOpts\n            );\n            infosStrArr.push(alterInfoStr);\n        }\n\n        if (!Type.array.isNotEmpty(infosStrArr)) {\n            throw new Error(ErrMsg.emptyAlterInfos);\n        }\n        const alterInfosStr: string = infosStrArr.join(\",\");\n        const queryTable = this.getQueryTable();\n        const tmplOpts = {\n            queryTable,\n            alterInfosStr,\n        };\n        const query: string = analyTmpl(ALTER_TEMPLATE, tmplOpts);\n        return query;\n    }\n\n    protected feildTmpl(fieldInfo: AlterField): string {\n        const field = fieldInfo.field;\n        const type = fieldInfo.type;\n        const unsigned = fieldInfo.unsigned;\n        const notNull = fieldInfo.notNull;\n        let defaultValue = fieldInfo.default;\n        const autoIncrement = fieldInfo.autoIncrement;\n        const onUpdate = fieldInfo.onUpdate;\n        let comment = fieldInfo.comment;\n\n        const tmplOpts: any = {};\n\n        if (Type.string.isNotEmpty(field)) {\n            tmplOpts[\"field\"] = this.safeKey(<string>field);\n        }\n\n        if (Type.string.isNotEmpty(type)) {\n            tmplOpts[\"type\"] = (<string>type).toUpperCase();\n        }\n\n        if (unsigned === true) {\n            tmplOpts[\"unsigned\"] = TableOptions.unsigned;\n        }\n\n        if (notNull === true) {\n            tmplOpts[\"notNull\"] = TableOptions.notNull;\n        }\n\n        if (Type.string.is(defaultValue) || Type.number.is(defaultValue)) {\n            let needSafe = true;\n            let upperValue;\n            if (Type.string.is(defaultValue)) {\n                upperValue = (<string>defaultValue).toUpperCase();\n                needSafe = !TABLE_OPT_VALUES.includes(upperValue);\n            }\n            defaultValue = needSafe ? this.safeValue(<string>defaultValue) : upperValue;\n            tmplOpts[\"default\"] = `${TableOptions.default} ${defaultValue}`;\n        }\n\n        if (autoIncrement === true) {\n            tmplOpts[\"autoIncrement\"] = TableOptions.autoIncrement;\n        }\n\n        if (Type.string.isNotEmpty(onUpdate)) {\n            tmplOpts[\"onUpdate\"] = `${TableOptions.onUpdate} ${onUpdate}`;\n        }\n\n        if (Type.string.isNotEmpty(comment)) {\n            comment = this.safeValue(<string>comment);\n            tmplOpts[\"comment\"] = `${TableOptions.comment} ${comment}`;\n        }\n\n        const feildStr: string = analyTmpl(FEILD_TEMPLATE, tmplOpts);\n\n        return feildStr;\n    }\n}\n\nexport default Alter;\n","const ErrMsg = {\n    errorConnectConfig: \"错误的连接配置\",\n    emptyConnectPool: \"未连接数据库\",\n    errorDialectType: \"错误的数据库类型\",\n    errorConnect: \"错误的连接\"\n};\n\nexport default ErrMsg;\n","import ConnectError from \"./connect.error\";\n\nconst ErrMsg = {\n    ...ConnectError\n};\n\nexport default ErrMsg;\n","import Schema from \"schema-verify\";\nimport { DialectTypes } from \"../../constant/enum\";\n\nconst conConfigSchema = new Schema({\n    type: Object,\n    props: [\n        {\n            index: \"host\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        [\n            {\n                index: \"port\",\n                type: String\n            },\n            {\n                type: Number\n            }\n        ],\n        {\n            index: \"user\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"password\",\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"database\",\n            required: true,\n            type: String,\n            minLength: 1\n        },\n        {\n            index: \"dialect\",\n            type: String,\n            enum: DialectTypes\n        },\n        {\n            index: \"connectionLimit\",\n            type: Number,\n            natural: true\n        },\n        {\n            index: \"connectTimeout\",\n            type: Number,\n            natural: true\n        }\n    ]\n});\n\nexport const conConfigVerify = conConfigSchema.verify;\n","import { Type } from \"schema-verify\";\nimport { conConfigVerify } from \"../../verify/execute/index\";\nimport { ConnectConfig } from \"../../constant/interface\";\nimport ErrMsg from \"../../error/execute/index\";\n\nclass BaseConnect {\n    dbConfig: ConnectConfig = {} as ConnectConfig;\n    pool: any;\n    constructor(config: ConnectConfig) {\n        this.setConfig(config);\n    }\n\n    setConfig(config: ConnectConfig): void {\n        if (!conConfigVerify(config)) {\n            throw new Error(ErrMsg.errorConnectConfig);\n        }\n        const host: string = config.host;\n        const user: string = config.user;\n        const password = config.password;\n        const port = config.port;\n        const database: string = config.database;\n        const connectTimeout = config.connectTimeout;\n        let connectionLimit = config.connectionLimit;\n        connectionLimit = Type.number.isNatural(connectionLimit)\n            ? connectionLimit\n            : 1;\n        let dbConfig = {\n            host,\n            user,\n            password,\n            port,\n            database,\n            connectTimeout,\n            connectionLimit,\n        };\n        this.dbConfig = Type.object.pure(dbConfig);\n    }\n\n    loadModule(moduleName: any): any {\n        try {\n            return require(moduleName);\n        } catch (err) {\n            if (err && err.code === \"MODULE_NOT_FOUND\") {\n                throw new Error(`请先安装模块 ${moduleName}`);\n            }\n            throw err;\n        }\n    }\n}\n\nexport default BaseConnect;\n","import { Type } from \"schema-verify\";\nimport { ConnectConfig, DbConnect } from \"../../constant/interface\";\nimport { DialectModules } from \"../../constant/enum\";\nimport ErrMsg from \"../../error/execute/index\";\nimport BaseConnect from \"./base_connect\";\n\nclass MysqlConnect extends BaseConnect {\n    constructor(config: ConnectConfig) {\n        super(config);\n        this.pool = this.getPool();\n    }\n\n    getPool(): any {\n        let pool = this.pool;\n        const dbConfig = this.dbConfig;\n        if (Type.object.is(pool) && Type.func.is(pool.getConnection)) {\n            return pool;\n        }\n        const MysqlModule = this.loadModule(DialectModules.mysql);\n        pool = MysqlModule.createPool(dbConfig);\n        return pool;\n    }\n\n    getDbConnect(): Promise<DbConnect> {\n        const pool = this.getPool() || {};\n        if (Type.func.isNot(pool.getConnection)) {\n            throw new Error(ErrMsg.emptyConnectPool);\n        }\n        return new Promise<DbConnect>((relsove, reject) => {\n            pool.getConnection((err: Error, connection: any) => {\n                if (err) {\n                    reject(err);\n                }\n                if (\n                    !connection ||\n                    Type.func.isNot(connection.query) ||\n                    Type.func.isNot(connection.release)\n                ) {\n                    reject(new Error(ErrMsg.errorConnect));\n                }\n                relsove(connection);\n            });\n        });\n    }\n}\n\nexport default MysqlConnect;\n","import { Type } from \"schema-verify\";\nimport { ConnectConfig, DbConnect } from \"../../constant/interface\";\nimport { DialectModules } from \"../../constant/enum\";\nimport BaseConnect from \"./base_connect\";\n\nclass MyssqlConnect extends BaseConnect {\n    constructor(config: ConnectConfig) {\n        super(config);\n        this.pool = this.getPool();\n    }\n\n    getPool(): any {\n        let pool = this.pool;\n        const dbConfig = this.dbConfig;\n        if (Type.object.is(pool) && Type.func.is(pool.acquire)) {\n            return pool;\n        }\n        const config = {\n            server: dbConfig.host,\n            port: dbConfig.port,\n            user: dbConfig.user,\n            password: dbConfig.password,\n            database: dbConfig.database,\n            connectionTimeout: dbConfig.connectTimeout,\n            pool: {\n                min: 1,\n                max: dbConfig.connectionLimit || 1,\n            },\n        };\n        const MssqlModule = this.loadModule(DialectModules.mssql);\n        pool = new MssqlModule.ConnectionPool(config).connect();\n        return pool;\n    }\n\n    getDbConnect(): Promise<DbConnect> {\n        let pool = this.getPool() || {};\n        return new Promise<DbConnect>(async (relsove, reject) => {\n            pool = await pool;\n            this.pool = pool;\n            const request = pool.request();\n            const conn = {\n                query: function (query: any, cb: Function) {\n                    request.query(query, (err: Error, result: any) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        cb(err, result);\n                    });\n                },\n                release: () => {},\n            };\n            relsove(conn);\n        });\n    }\n}\n\nexport default MyssqlConnect;\n","import MysqlConnect from \"./connect/mysql_connect\";\nimport MyssqlConnect from \"./connect/mssql_connect\";\nimport { ConnectConfig } from \"../constant/interface\";\nimport { DialectTypes } from \"../constant/enum\";\nimport { Type } from \"schema-verify\";\nimport ErrMsg from \"../error/execute/index\";\n\nclass Execute {\n    dialectType: DialectTypes;\n    connect: any;\n    constructor(config: ConnectConfig) {\n        this.dialectType = config.dialect || DialectTypes.mysql;\n        this.connect = this.getConnect(config);\n    }\n    getConnect(config: ConnectConfig): MysqlConnect | MyssqlConnect {\n        const dialect = this.dialectType;\n        let connect;\n        switch (dialect) {\n            case DialectTypes.mysql:\n                connect = new MysqlConnect(config);\n                break;\n            case DialectTypes.mssql:\n                connect = new MyssqlConnect(config);\n                break;\n        }\n        if (Type.undefinedNull.is(connect)) {\n            throw new Error(ErrMsg.errorDialectType);\n        }\n        return connect;\n    }\n    async exec<T = any>(query: string): Promise<T> {\n        const connect = this.connect || {};\n        if (Type.func.isNot(connect.getDbConnect)) {\n            throw new Error(ErrMsg.emptyConnectPool);\n        }\n        const dbConnection = await connect.getDbConnect();\n        return new Promise<T>((relsove, reject) => {\n            dbConnection.query(query, function(err: Error, results: T) {\n                dbConnection.release();\n                if (err) {\n                    reject(err);\n                }\n                relsove(results);\n            });\n        });\n    }\n}\n\nexport default Execute;\n","import Insert from \"./insert\";\nimport Select from \"./select\";\nimport Update from \"./update\";\nimport Delete from \"./delete\";\nimport Replace from \"./replace\";\nimport Create from \"./create\";\nimport Alter from \"./alter\";\nimport Term from \"./term\";\nimport Func from \"./func\";\nimport Order from \"./order\";\nimport { Type } from \"schema-verify\";\nimport { QueryTypes, DialectTypes, WidgetTypes } from \"../constant/enum\";\nimport ErrMsg from \"../error/builder/index\";\nimport Execute from \"../execute/execute\";\nimport { ConnectConfig } from \"../constant/interface\";\nimport Store from \"./store\";\n\nconst TABLE_QUERY_TYPE = [\n    QueryTypes.insert,\n    QueryTypes.replace,\n    QueryTypes.select,\n    QueryTypes.update,\n    QueryTypes.delete,\n];\nclass Builder {\n    protected dialectType: DialectTypes;\n    protected execute: Execute | undefined;\n    public queryStore: string[];\n    protected queryTable: string = \"\";\n    constructor(dialectType?: DialectTypes, execute?: Execute) {\n        this.dialectType = dialectType || DialectTypes.mysql;\n        this.execute = execute;\n        this.queryStore = [];\n    }\n\n    insert(): Insert {\n        return this.queryInstance<Insert>(QueryTypes.insert);\n    }\n\n    select(): Select {\n        return this.queryInstance<Select>(QueryTypes.select);\n    }\n\n    update(): Update {\n        return this.queryInstance<Update>(QueryTypes.update);\n    }\n\n    delete(): Delete {\n        return this.queryInstance<Delete>(QueryTypes.delete);\n    }\n\n    replace(): Replace {\n        return this.queryInstance<Replace>(QueryTypes.replace);\n    }\n\n    create(): Create {\n        return this.queryInstance<Create>(QueryTypes.create);\n    }\n\n    alter(): Alter {\n        return this.queryInstance<Alter>(QueryTypes.alter);\n    }\n\n    get func(): Func {\n        return this.widgetInstance<Func>(WidgetTypes.func);\n    }\n\n    get term(): Term {\n        return this.widgetInstance<Term>(WidgetTypes.term);\n    }\n\n    get order(): Order {\n        return this.widgetInstance<Order>(WidgetTypes.order);\n    }\n\n    queryInstance<T>(type: QueryTypes): T {\n        let instance;\n        switch (type) {\n            case QueryTypes.insert:\n                instance = new Insert();\n                break;\n            case QueryTypes.replace:\n                instance = new Replace();\n                break;\n            case QueryTypes.select:\n                instance = new Select();\n                break;\n            case QueryTypes.update:\n                instance = new Update();\n                break;\n            case QueryTypes.delete:\n                instance = new Delete();\n                break;\n            case QueryTypes.create:\n                instance = new Create();\n                break;\n            case QueryTypes.alter:\n                instance = new Alter();\n                break;\n        }\n        return this.initInstance<T>(type, instance);\n    }\n\n    widgetInstance<T>(type: WidgetTypes): T {\n        let instance;\n        switch (type) {\n            case WidgetTypes.func:\n                instance = new Func();\n                break;\n            case WidgetTypes.term:\n                instance = new Term();\n                break;\n            case WidgetTypes.order:\n                instance = new Order();\n                break;\n        }\n        return this.initInstance<T>(type, instance);\n    }\n\n    protected initInstance<T>(\n        type: QueryTypes | WidgetTypes,\n        instance: any\n    ): T {\n        instance = Type.object.safe(instance);\n        const dialectType: DialectTypes = this.dialectType;\n        const execute = this.execute;\n        const queryTable: string = this.queryTable;\n        if (\n            Type.string.isNotEmpty(queryTable) &&\n            Type.func.is(instance.table)\n        ) {\n            if (TABLE_QUERY_TYPE.includes(type as QueryTypes)) {\n                instance.table(queryTable);\n            }\n        }\n        if (Type.func.is(instance.setDialect)) {\n            instance.setDialect(dialectType);\n        }\n        if (Type.func.is(instance.checkDialect)) {\n            instance.checkDialect();\n        }\n        if (Type.func.is(instance.setExecute) && execute) {\n            instance.setExecute(execute);\n        }\n        return instance;\n    }\n\n    table(tableName: string): this {\n        if (!Type.string.isNotEmpty(tableName)) {\n            throw new Error(ErrMsg.errorTableName);\n        }\n        this.queryTable = tableName;\n        return this;\n    }\n\n    build(): void {\n        throw new Error(ErrMsg.emptyQueryType);\n    }\n\n    setConnect(config: ConnectConfig): this {\n        if (Type.object.isNot(config)) {\n            return this;\n        }\n        config = Type.object.safe(config);\n        const execute = new Execute(config);\n        this.dialectType = config.dialect || DialectTypes.mysql;\n        this.execute = execute;\n        return this;\n    }\n\n    get query(): string | void {\n        return this.build();\n    }\n\n    getStore(): string[] {\n        return Store.getStore();\n    }\n\n    storeSql(query: string): void {\n        return Store.storeSql(query);\n    }\n\n    isStoreEmpty(): boolean {\n        return Store.isStoreEmpty();\n    }\n\n    cleanStoreSql(): void {\n        return Store.cleanStoreSql();\n    }\n}\n\nexport default Builder;\n","import Builder from \"./builder/builder\";\nimport Execute from \"./execute/execute\";\nimport { Type } from \"schema-verify\";\nimport { ConnectConfig } from \"./constant/interface\";\nimport { DialectTypes } from \"./constant/enum\";\n\nfunction SqlQuery(config: ConnectConfig | DialectTypes): Builder {\n    let dialect: DialectTypes;\n    if (Type.object.isNot(config)) {\n        dialect = DialectTypes.mysql;\n        if (\n            Type.string.isNotEmpty(config) &&\n            DialectTypes[<DialectTypes>config]\n        ) {\n            dialect = <DialectTypes>config;\n        }\n        return new Builder(dialect);\n    }\n    dialect = (<ConnectConfig>config).dialect || DialectTypes.mysql;\n    config = Type.object.safe(config);\n    const execute = new Execute(<ConnectConfig>config);\n    const builder = new Builder(dialect, execute);\n    return builder;\n}\n\nexport { Builder, Execute };\n\nexport default SqlQuery;\n"],"names":["analyTmpl","tmpl","opts","replace","match","key","hasOwnProperty","Type","string","isNotEmpty","trim","argStrArrTrans","arg","otherArgs","args","array","is","safe","unshift","ErrMsg","errorFuncInfo","errorFieldDataArr","errorInsertValues","errorDialect","errorManualSql","errorExecute","emptySqlQuery","errorPage","errorSize","errorStep","errorOffset","errorOrderInfo","errorValueList","errorFieldMap","errorTermdata","errorTermSign","errorTermValue","errorTermInfo","errorTermBracket","errorTermLogic","emptyUpdateInfo","errorUpdateInfo","emptyQueryType","errorCreateDbName","errorAlterField","emptyAlterInfos","tableFieldsError","tableFieldsAsMapError","joinTableInfoError","CombineError","InsertError","BaseError","LimitError","OrderError","SelectError","TermError","UpdateError","BuilderError","CreateError","AlterError","JoinError","errorTableName","errorField","errorFields","errorFieldData","needStr","needNumStr","notSupportDialect","errorTermStatus","DialectsObj","mysql","safeValue","value","result","number","Error","safeKey","mssql","postgresql","sqlite","DialectTypes","QueryTypes","FuncTypes","TermLogic","TermSign","OrderTypes","UpdateTypes","WidgetTypes","SqlDataTypes","TableOptions","AlterMethods","JoinTypes","TermTypes","DialectModules","fieldDataArrSchema","Schema","type","Array","elements","Object","required","props","String","Number","fieldDataArrVerify","verify","funcInfoSchema","restrict","index","funcInputSchema","custom","funcInfoVerify","funcInputVerify","dialectSchema","Function","manualSqlSchema","minLength","dialectVerify","manualSqlVerify","pageSchema","integer","min","limitInfoSchema","pageVerify","limitInfoVerify","orderInfoSchema","enum","valueListSchema","orderInfoVerify","valueListVerify","termDataSchema","termSignSchema","termLogicSchema","termValueSchema","termInSchema","termBetweenSchema","length","termBracketSchema","termInfoSchema","termDataVerify","termSignVerify","termLogicVerify","termValueVerify","termInVerify","termBetweenVerify","termBracketVerify","termInfoVerify","updateInfoSchema","updateInfoVerify","tableFieldSchema","Boolean","combineKeySchema","tableInfoSchema","tableInfoVerify","alterFieldSchema","alterInfosSchema","schema","alterInfosVerify","fieldsMapSchema","fieldsAsMapSchema","joinInfoSchema","tableName","termInfos","symbol","tableFields","fieldsMapVerify","fieldsAsMapVerify","joinInfoVerify","strArrVerify","strObjVerify","naturalVerify","natural","integerVerify","fieldDataVerify","QUERY_LIST","Store","getStore","slice","storeSql","query","push","isStoreEmpty","cleanStoreSql","Base","constructor","_dialectType","dbModule","loadModule","escape","_safeValue","_safeKey","dialectType","Dialects","setDialect","dialect","_dialect","moduleName","require","err","code","manualSql","sql","formatManualSql","func","object","build","table","queryTable","_queryTable","getQueryTable","sqlStr","e","setExecute","execute","_execute","exec","isNot","execAll","queryList","promiseArr","Promise","all","Limit","limitBuild","limitInfo","offset","step","limit","undefined","paging","page","size","SQL_NAME","Order","orderInfos","orderSql","formatOrderSql","ordersArr","info","field","list","safeField","listStr","map","join","from","Set","ordersStr","orderBuild","descBy","firstField","otherFields","argFields","orderCache","desc","ascBy","asc","orderField","data","fields","keys","order","fieldOrder","Query","getLimitCase","queryLimit","getOrderCase","queryOrder","Insert","queryType","insert","insertData","insertFields","insertDataArr","assign","concat","multiData","dataArr","values","formatValuesSql","formatFields","formatValues","valuesSql","valuesArr","valuesStrFormat","valuesStr","valuesArrStrFormat","arr","fieldsStr","Term","termBrackets","termsBuild","termSql","formatTermSql","allTermStr","formatTerms","formatTermBrackets","brackets","terms","bracketsLen","termsLen","i","curBracket","perBracket","nextBracket","curPos","position","curLogic","logic","prePos","nextPos","preTerms","nextTerms","needFullBracket","termStr","formatBracketTerm","preTermsStr","nextTermsStr","term","sign","termValue","formatTermValue","in","notIn","item","between","notBetween","lower","upper","like","notlike","termCache","termsArr","bracketTerm","bracket","sqlTerm","equal","and","notEqual","more","less","moreEqual","lessEqual","notLike","orEqual","or","orNotEqual","orIn","orNotIn","orMore","orLess","orMoreEqual","orLessEqual","orLike","orBetween","orNotBetween","orNotLike","orBracket","TABLE_OPT_VALUES","FEILD_TEMPLATE","WHERE_TERM_API","HAVING_TERM_API","TERM_TYPES","TermApi","termApi","termApiFn","termStatus","includes","getTermCase","Where","whereTermApi","whereTermApiFn","getWhereTermCase","whereBracket","whereOrBracket","where","bind","whereBuild","whereTerm","whereSql","Having","havingTermApi","havingTermApiFn","getHavingTermCase","havingBracket","havingOrBracket","having","havingBuild","termInstance","havingSql","Func","funcField","needSafeTrans","fieldStr","funcInfo","funcFeild","count","sum","max","avg","abs","ceil","floor","round","log","log2","exp","power","acos","asin","atan","cos","sin","tan","conv","random","rand","radians","degrees","distinct","Combine","combineFuncs","groupBuild","groupByFields","groupBy","getFuncCase","funcInstance","formatFuncs","funcs","funcsCache","funcFeilds","funcInfos","funcCase","call","Join","getQueryTables","queryTables","formatJoinFields","tableFieldsMap","tableFieldsAsMap","asMap","safeTable","tableField","safeAsField","joinBuild","joinTypeInfos","joinStrs","typeInfo","termStrs","joinTermBuild","safeTableName","joinInfoStr","allJoinStr","termInfo","multiTables","tables","fieldsMap","tableAsMap","joinInfo","innerJoin","inner","leftJoin","left","rightJoin","right","Select","selectFields","fieldsAsMap","formatFieldStr","joinFields","formatTableStr","tablesStr","select","findOne","Update","updateInfos","formatData","dataStr","update","infoStr","set","add","minus","updateCache","updateInfo","Delete","delete","Replace","TABLE_TEMPLATE","TABLE_OPTIONS_TEMPLATE","DATABASE_TEMPLATE","Create","checkDialect","tableInfo","createTableSqlStr","createTableInfo","dataBase","dbName","createDbName","tmplOpts","tableSqlStr","tableTmpl","feildsStr","tableOptionsStr","tableOptsStr","tableInfoStr","primaryKey","uniqueKey","feildTmplArr","fieldInfo","feildStr","feildTmpl","primaryKeyStr","uniqueKeyStr","toUpperCase","unsigned","notNull","defaultValue","default","autoIncrement","onUpdate","comment","needSafe","upperValue","keyInfo","keyName","combineFields","combineFieldsStr","constraint","engine","defaultCharset","ALTER_TEMPLATE","ALTER_INFOS_TEMPLATE","Alter","alterField","alterCache","drop","modify","change","method","alterInfo","alterInfos","infosStrArr","alterFieldStr","alterInfoStr","alterInfosStr","errorConnectConfig","emptyConnectPool","errorDialectType","errorConnect","ConnectError","conConfigSchema","conConfigVerify","BaseConnect","config","setConfig","host","user","password","port","database","connectTimeout","connectionLimit","isNatural","dbConfig","pure","MysqlConnect","pool","getPool","getConnection","MysqlModule","createPool","getDbConnect","relsove","reject","connection","release","MyssqlConnect","acquire","server","connectionTimeout","MssqlModule","ConnectionPool","connect","request","conn","cb","Execute","getConnect","undefinedNull","dbConnection","results","TABLE_QUERY_TYPE","Builder","queryStore","queryInstance","create","alter","widgetInstance","instance","initInstance","setConnect","SqlQuery","builder"],"mappings":"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"}